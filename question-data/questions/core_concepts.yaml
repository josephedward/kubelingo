- id: ckad-sim::q7-move-pod
  prompt: 'A pod named `webserver-sat-003` in namespace `saturn` needs to be moved
    to namespace `neptune`. The pod is identifiable by the annotation `description:
    this is the server for the E-Commerce System my-happy-shop`. Export its YAML,
    modify it to run in the `neptune` namespace, apply the new manifest, and then
    delete the original pod from `saturn`.'
  type: live_k8s_edit
  pre_shell_cmds:
  - kubectl create ns saturn
  - kubectl create ns neptune
  - "cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name:\
    \ webserver-sat-003\n  namespace: saturn\n  labels:\n    id: webserver-sat-003\n\
    \  annotations:\n    description: 'this is the server for the E-Commerce System\
    \ my-happy-shop'\nspec:\n  containers:\n  - name: webserver-sat\n    image: nginx:1.16.1-alpine\n\
    EOF\n"
  validation_steps:
  - cmd: kubectl -n neptune get pod webserver-sat-003 -o jsonpath='{.metadata.namespace}'
    matcher: {}
  - cmd: '! kubectl -n saturn get pod webserver-sat-003'
    matcher: {}
  explanation: The process involves exporting the Pod's YAML using `kubectl get pod
    <pod-name> -n <namespace> -o yaml`. Then, edit the file to change the `namespace`
    field and remove runtime-injected fields like `status`, `resourceVersion`, `uid`,
    and `creationTimestamp`. After saving the cleaned YAML, create the Pod in the
    new namespace with `kubectl apply -f <file.yaml>` and delete the original pod
    with `kubectl delete pod <pod-name> -n <old-namespace>`.
  metadata:
    id: ckad-sim::q7-move-pod
    type: live_k8s_edit
    category: Core Concepts
    source: https://killer.sh/ckad
- id: ckad-sim::q1-namespaces
  prompt: Get the list of all Namespaces in the cluster and save the output to `/opt/course/1/namespaces`.
    The list can contain other columns like `STATUS` or `AGE`.
  type: live_k8s_edit
  pre_shell_cmds:
  - mkdir -p /opt/course/1
  validation_steps:
  - cmd: grep -q default /opt/course/1/namespaces
    matcher: {}
  - cmd: grep -q kube-system /opt/course/1/namespaces
    matcher: {}
  explanation: The command `kubectl get namespaces` or its short form `k get ns` lists
    all namespaces. The output can be redirected to a file using `> /path/to/file`.
  metadata:
    id: ckad-sim::q1-namespaces
    type: live_k8s_edit
    category: Core Concepts
    source: https://killer.sh/ckad
- id: ckad-sim::q2-pods
  prompt: Create a single Pod named `pod1` of image `httpd:2.4.41-alpine` in Namespace
    `default`. The container must be named `pod1-container`. Then, write a command
    that outputs the status of this pod into the file `/opt/course/2/pod1-status-command.sh`.
  type: live_k8s_edit
  pre_shell_cmds:
  - mkdir -p /opt/course/2
  validation_steps:
  - cmd: kubectl get pod pod1 -o jsonpath='{.spec.containers[0].name}'
    matcher: {}
  - cmd: kubectl get pod pod1 -o jsonpath='{.spec.containers[0].image}'
    matcher: {}
  - cmd: sh /opt/course/2/pod1-status-command.sh
    matcher: {}
  explanation: A Pod can be created imperatively with `kubectl run` and `--dry-run=client
    -o yaml` to generate a manifest. The manifest can then be edited to meet specific
    requirements like the container name. A command to check the pod's status can
    use `kubectl describe pod <pod_name>` and `grep`, or `kubectl get pod <pod_name>`
    with a `jsonpath` expression like `{.status.phase}`. This command is then saved
    to the required file.
  metadata:
    id: ckad-sim::q2-pods
    type: live_k8s_edit
    category: Core Concepts
    source: https://killer.sh/ckad
