- id: ckad-sim::q1-namespaces
  prompt: "Get the list of all Namespaces in the cluster and save the output to `/opt/course/1/namespaces`. The list can contain other columns like `STATUS` or `AGE`."
  type: live_k8s_edit
  category: "Core Concepts"
  source: "https://killer.sh/ckad"
  pre_shell_cmds:
    - "mkdir -p /opt/course/1"
  validation_steps:
    - cmd: "grep -q default /opt/course/1/namespaces"
      matchers:
        - type: "exit_code"
          expected: 0
    - cmd: "grep -q kube-system /opt/course/1/namespaces"
      matchers:
        - type: "exit_code"
          expected: 0
  explanation: "The command `kubectl get namespaces` or its short form `k get ns` lists all namespaces. The output can be redirected to a file using `> /path/to/file`."

- id: ckad-sim::q2-pods
  prompt: "Create a single Pod named `pod1` of image `httpd:2.4.41-alpine` in Namespace `default`. The container must be named `pod1-container`. Then, write a command that outputs the status of this pod into the file `/opt/course/2/pod1-status-command.sh`."
  type: live_k8s_edit
  category: "Core Concepts"
  source: "https://killer.sh/ckad"
  pre_shell_cmds:
    - "mkdir -p /opt/course/2"
  validation_steps:
    - cmd: "kubectl get pod pod1 -o jsonpath='{.spec.containers[0].name}'"
      matchers:
        - type: "exact_match"
          expected: "pod1-container"
    - cmd: "kubectl get pod pod1 -o jsonpath='{.spec.containers[0].image}'"
      matchers:
        - type: "exact_match"
          expected: "httpd:2.4.41-alpine"
    - cmd: "sh /opt/course/2/pod1-status-command.sh"
      matchers:
        - type: "contains"
          expected: "Running"
  explanation: "A Pod can be created imperatively with `kubectl run` and `--dry-run=client -o yaml` to generate a manifest. The manifest can then be edited to meet specific requirements like the container name. A command to check the pod's status can use `kubectl describe pod <pod_name>` and `grep`, or `kubectl get pod <pod_name>` with a `jsonpath` expression like `{.status.phase}`. This command is then saved to the required file."

- id: ckad-sim::q3-job
  prompt: "Create a Job manifest at `/opt/course/3/job.yaml`. The Job, named `neb-new-job` in namespace `neptune`, should run the command `sleep 2 && echo done` with image `busybox:1.31.0`. It should have a total of 3 completions, with 2 running in parallel. Pods created by the Job must have the label `id: awesome-job`, and the container should be named `neb-new-job-container`. After creating the manifest, apply it to start the Job."
  type: live_k8s_edit
  category: "Workload Management"
  source: "https://killer.sh/ckad"
  pre_shell_cmds:
    - "kubectl create namespace neptune"
    - "mkdir -p /opt/course/3"
  validation_steps:
    - cmd: "kubectl -n neptune get job neb-new-job -o jsonpath='{.spec.completions}'"
      matchers:
        - type: "exact_match"
          expected: "3"
    - cmd: "kubectl -n neptune get job neb-new-job -o jsonpath='{.spec.parallelism}'"
      matchers:
        - type: "exact_match"
          expected: "2"
    - cmd: "kubectl -n neptune get job neb-new-job -o jsonpath='{.spec.template.metadata.labels.id}'"
      matchers:
        - type: "exact_match"
          expected: "awesome-job"
    - cmd: "kubectl -n neptune get job neb-new-job -o jsonpath='{.spec.template.spec.containers[0].name}'"
      matchers:
        - type: "exact_match"
          expected: "neb-new-job-container"
    - cmd: "test -f /opt/course/3/job.yaml"
      matchers:
        - type: "exit_code"
          expected: 0
    - cmd: "kubectl -n neptune get job neb-new-job"
      matchers:
        - type: "exit_code"
          expected: 0
  explanation: "A Job manifest can be created using `kubectl create job --dry-run=client -o yaml`. The YAML should then be edited to set `completions`, `parallelism`, container name, and pod labels in the `template` section. The job is then created using `kubectl apply -f <file.yaml>`. The job's status can be monitored with `kubectl get job` and `kubectl describe job`."

- id: ckad-sim::q5-sa-secret
  prompt: "In namespace `neptune`, find the Secret associated with the ServiceAccount `neptune-sa-v2` and write its decoded token to the file `/opt/course/5/token`."
  type: live_k8s_edit
  category: "Configuration & Security"
  source: "https://killer.sh/ckad"
  pre_shell_cmds:
    - "kubectl create namespace neptune"
    - "kubectl -n neptune create sa neptune-sa-v2"
    - "kubectl -n neptune create secret generic neptune-secret-1 --from-literal=token=$(echo -n my-secret-token-value | base64)"
    - "kubectl -n neptune annotate secret neptune-secret-1 kubernetes.io/service-account.name=neptune-sa-v2"
    - "mkdir -p /opt/course/5"
  validation_steps:
    - cmd: "cat /opt/course/5/token"
      matchers:
        - type: "exact_match"
          expected: "my-secret-token-value"
  explanation: "First, find the secret associated with the ServiceAccount `neptune-sa-v2`. You can do this by listing secrets in the `neptune` namespace and checking their annotations (`k -n neptune get secrets -o yaml`). The secret with the annotation `kubernetes.io/service-account.name: neptune-sa-v2` is the correct one. Then, get the token from the secret's data, base64 decode it, and write it to the specified file. A quick way is `kubectl -n neptune get secret <secret-name> -o jsonpath='{.data.token}' | base64 --decode > /opt/course/5/token`."

- id: ckad-sim::q6-readinessprobe
  prompt: "Create a single Pod named `pod6` in namespace `default` with image `busybox:1.31.0`. The pod should run the command `touch /tmp/ready && sleep 1d`. Configure a readiness probe that executes `cat /tmp/ready`, with an `initialDelaySeconds` of 5 and a `periodSeconds` of 10. Create the pod and ensure it becomes ready."
  type: live_k8s_edit
  category: "Configuration & Security"
  source: "https://killer.sh/ckad"
  validation_steps:
    - cmd: "kubectl get pod pod6 -o jsonpath='{.spec.containers[0].readinessProbe.initialDelaySeconds}'"
      matchers:
        - type: "exact_match"
          expected: "5"
    - cmd: "kubectl get pod pod6 -o jsonpath='{.spec.containers[0].readinessProbe.periodSeconds}'"
      matchers:
        - type: "exact_match"
          expected: "10"
    - cmd: "kubectl get pod pod6 -o jsonpath='{.spec.containers[0].command[2]}'"
      matchers:
        - type: "contains"
          expected: "touch /tmp/ready && sleep 1d"
    - cmd: "kubectl wait --for=condition=Ready pod/pod6 --timeout=30s"
      matchers:
        - type: "exit_code"
          expected: 0
  explanation: "A pod manifest can be generated using `kubectl run pod6 --image=busybox:1.31.0 --command -- sh -c \"touch /tmp/ready && sleep 1d\" --dry-run=client -o yaml`. Then, edit the YAML to add the `readinessProbe` section to the container spec. The probe should have an `exec` action with the command, and the specified `initialDelaySeconds` and `periodSeconds`. Finally, create the pod with `kubectl apply -f <file.yaml>`. You can monitor its status with `kubectl get pod pod6 -w`."
