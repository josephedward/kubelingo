questions:
- answers: []
  category: null
  correct_yaml: null
  difficulty: null
  explanation: null
  id: q1
  initial_files: {}
  pre_shell_cmds: []
  prompt: hello
  response: null
  review: false
  schema_category: null
  source: null
  source_file: f.yaml
  subject: null
  type: null
  validation_steps: null
  validator: null
- id: add-cmds-q1
  prompt: Create an alias 'k' for 'kubectl'
  type: command
  metadata:
    id: add-cmds-q1
    category: Additional Commands
    response: alias k=kubectl
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=You%20can%20also%20use%20a,that%20also%20works%20with%20completion
- id: add-cmds-q2
  prompt: Enable kubectl autocompletion for bash
  type: command
  metadata:
    id: add-cmds-q2
    category: Additional Commands
    response: source <(kubectl completion bash)
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=BASH
- id: add-cmds-q3
  prompt: Add kubectl autocompletion to ~/.bashrc
  type: command
  metadata:
    id: add-cmds-q3
    category: Additional Commands
    response: echo "source <(kubectl completion bash)" >> ~/.bashrc
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=source%20%3C%28kubectl%20completion%20bash%29%20,permanently%20to%20your%20bash%20shell
- id: add-cmds-q4
  prompt: Set the KUBECONFIG environment variable to /home/user/config
  type: command
  metadata:
    id: add-cmds-q4
    category: Additional Commands
    response: export KUBECONFIG=/home/user/config
    links:
    - https://kubernetes.io/pt-br/docs/reference/kubectl/cheatsheet/#:~:text=Define%20com%20qual%20cluster%20Kubernetes,detalhadas%20do%20arquivo%20de%20configura%C3%A7%C3%A3o
- id: add-cmds-q5
  prompt: Check the kubectl client and server versions
  type: command
  metadata:
    id: add-cmds-q5
    category: Additional Commands
    response: kubectl version
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,on%20the%20client%20and%20server
- id: add-cmds-q6
  prompt: Create a namespace named dev
  type: command
  metadata:
    id: add-cmds-q6
    category: Additional Commands
    response: kubectl create namespace dev
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_create/kubectl_create_namespace/#:~:text=,namespace
- id: add-cmds-q7
  prompt: List all namespaces
  type: command
  metadata:
    id: add-cmds-q7
    category: Additional Commands
    response: kubectl get namespaces
    links:
    - https://kubernetes.io/docs/tasks/administer-cluster/namespaces/#:~:text=Viewing%20namespaces
- id: add-cmds-q8
  prompt: Describe namespace dev
  type: command
  metadata:
    id: add-cmds-q8
    category: Additional Commands
    response: kubectl describe namespace dev
    links:
    - https://kubernetes.io/docs/tasks/administer-cluster/namespaces/#:~:text=You%20can%20also%20get%20the,of%20a%20specific%20namespace%20using
- id: add-cmds-q9
  prompt: Delete namespace dev
  type: command
  metadata:
    id: add-cmds-q9
    category: Additional Commands
    response: kubectl delete namespace dev
    links:
    - https://kubernetes.io/docs/tasks/administer-cluster/namespaces/#:~:text=Delete%20a%20namespace%20with
- id: add-cmds-q10
  prompt: Create a deployment named frontend using image nginx:1.14
  type: command
  metadata:
    id: add-cmds-q10
    category: Additional Commands
    response: kubectl create deployment frontend --image=nginx:1.14
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_create/kubectl_create_deployment/#:~:text=,image%3Dbusybox
- id: add-cmds-q11
  prompt: List all deployments
  type: command
  metadata:
    id: add-cmds-q11
    category: Additional Commands
    response: kubectl get deployments
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=kubectl%20get%20pods%20,all%20pods%20in%20the%20namespace
- id: add-cmds-q12
  prompt: Describe deployment frontend
  type: command
  metadata:
    id: add-cmds-q12
    category: Additional Commands
    response: kubectl describe deployment frontend
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=3,the%20Deployment
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=Labels%3A%20%20%20%20,0
- id: add-cmds-q13
  prompt: Scale deployment frontend to 3 replicas
  type: command
  metadata:
    id: add-cmds-q13
    category: Additional Commands
    response: kubectl scale deployment frontend --replicas=3
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=You%20can%20scale%20a%20Deployment,by%20using%20the%20following%20command
- id: add-cmds-q14
  prompt: Roll back the deployment frontend to the previous version
  type: command
  metadata:
    id: add-cmds-q14
    category: Additional Commands
    response: kubectl rollout undo deployment frontend
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=1,rollback%20to%20the%20previous%20revision
- id: add-cmds-q15
  prompt: Restart the deployment frontend
  type: command
  metadata:
    id: add-cmds-q15
    category: Additional Commands
    response: kubectl rollout restart deployment frontend
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=kubectl%20set%20image%20deployment%2Ffrontend%20www%3Dimage%3Av2,Xem%20tr%E1%BA%A1ng
- id: add-cmds-q16
  prompt: Delete deployment frontend
  type: command
  metadata:
    id: add-cmds-q16
    category: Additional Commands
    response: kubectl delete deployment frontend
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=The%20output%20is%20similar%20to,this
- id: add-cmds-q17
  prompt: Run a pod named busybox with image busybox that runs indefinitely
  type: command
  metadata:
    id: add-cmds-q17
    category: Additional Commands
    response: kubectl run busybox --image=busybox --restart=Never -- /bin/sh -c "sleep
      3600"
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_run/#:~:text=,restart%3DNever
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_run/#:~:text=,argN)
- id: add-cmds-q18
  prompt: List all pods
  type: command
  metadata:
    id: add-cmds-q18
    category: Additional Commands
    response: kubectl get pods
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=kubectl%20get%20pods%20,all%20pods%20in%20the%20namespace
- id: add-cmds-q19
  prompt: Describe pod busybox
  type: command
  metadata:
    id: add-cmds-q19
    category: Additional Commands
    response: kubectl describe pod busybox
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=,pod)
- id: add-cmds-q20
  prompt: Delete pod busybox
  type: command
  metadata:
    id: add-cmds-q20
    category: Additional Commands
    response: kubectl delete pod busybox
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=cat%20pod.json%20,JSON%20%C4%91%C6%B0%E1%BB%A3c%20truy%E1%BB%81n%20v%C3%A0o%20std
- id: add-cmds-q21
  prompt: Expose deployment frontend on port 80 as a ClusterIP service named frontend-svc
  type: command
  metadata:
    id: add-cmds-q21
    category: Additional Commands
    response: kubectl expose deployment frontend --port=80 --type=ClusterIP --name=frontend-svc
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=,port%3D8000
- id: add-cmds-q22
  prompt: List all services
  type: command
  metadata:
    id: add-cmds-q22
    category: Additional Commands
    response: kubectl get services
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=,current%20namespace%2C%20with%20more%20details
- id: add-cmds-q23
  prompt: Describe service frontend-svc
  type: command
  metadata:
    id: add-cmds-q23
    category: Additional Commands
    response: kubectl describe service frontend-svc
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=,pod)
- id: add-cmds-q24
  prompt: Delete service frontend-svc
  type: command
  metadata:
    id: add-cmds-q24
    category: Additional Commands
    response: kubectl delete service frontend-svc
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=,port%3D8000
- id: add-cmds-q25
  prompt: Create a ConfigMap named app-config from file config.yaml
  type: command
  metadata:
    id: add-cmds-q25
    category: Additional Commands
    response: kubectl create configmap app-config --from-file=config.yaml
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=files%3A%20
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=)
- id: add-cmds-q26
  prompt: List all ConfigMaps
  type: command
  metadata:
    id: add-cmds-q26
    category: Additional Commands
    response: kubectl get configmaps
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Endpoints
- id: add-cmds-q27
  prompt: Describe configmap app-config
  type: command
  metadata:
    id: add-cmds-q27
    category: Additional Commands
    response: kubectl describe configmap app-config
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=Define%20container%20environment%20variables%20using,ConfigMap%20data
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=pods%2Fpod,to%20clipboard
- id: add-cmds-q28
  prompt: Delete configmap app-config
  type: command
  metadata:
    id: add-cmds-q28
    category: Additional Commands
    response: kubectl delete configmap app-config
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=Before%20proceeding%2C%20clean%20up%20some,of%20the%20ConfigMaps%20you%20made
- id: add-cmds-q29
  prompt: Create a generic secret named db-secret with literal username and password
  type: command
  metadata:
    id: add-cmds-q29
    category: Additional Commands
    response: kubectl create secret generic db-secret --from-literal=username=admin
      --from-literal=password=secret
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=1,value%20pair%20in%20a%20ConfigMap
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- id: add-cmds-q30
  prompt: List all secrets
  type: command
  metadata:
    id: add-cmds-q30
    category: Additional Commands
    response: kubectl get secrets
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- id: add-cmds-q31
  prompt: Describe secret db-secret
  type: command
  metadata:
    id: add-cmds-q31
    category: Additional Commands
    response: kubectl describe secret db-secret
    links:
    - https://kubernetes.io/docs/tasks/configmap-secret/managing-secret-using-config-file/#:~:text=Managing%20Secrets%20using%20Configuration%20File,yaml
- id: add-cmds-q32
  prompt: Delete secret db-secret
  type: command
  metadata:
    id: add-cmds-q32
    category: Additional Commands
    response: kubectl delete secret db-secret
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=kubectl%20label%20pods%20my,T%E1%BB%B1%20%C4%91%E1%BB%99ng
- id: add-cmds-q33
  prompt: Create a ServiceAccount named default-sa
  type: command
  metadata:
    id: add-cmds-q33
    category: Additional Commands
    response: kubectl create serviceaccount default-sa
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- id: add-cmds-q34
  prompt: List all ServiceAccounts
  type: command
  metadata:
    id: add-cmds-q34
    category: Additional Commands
    response: kubectl get serviceaccounts
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- id: add-cmds-q35
  prompt: Describe serviceaccount default-sa
  type: command
  metadata:
    id: add-cmds-q35
    category: Additional Commands
    response: kubectl describe serviceaccount default-sa
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- id: add-cmds-q36
  prompt: Delete serviceaccount default-sa
  type: command
  metadata:
    id: add-cmds-q36
    category: Additional Commands
    response: kubectl delete serviceaccount default-sa
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- id: add-cmds-q37
  prompt: Label pod busybox with env=prod
  type: command
  metadata:
    id: add-cmds-q37
    category: Additional Commands
    response: kubectl label pod busybox env=prod
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=kubectl%20replace%20
- id: add-cmds-q38
  prompt: Remove the label env from pod busybox
  type: command
  metadata:
    id: add-cmds-q38
    category: Additional Commands
    response: kubectl label pod busybox env-
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=kubectl%20replace%20
- id: add-cmds-q39
  prompt: Annotate deployment frontend with description=test
  type: command
  metadata:
    id: add-cmds-q39
    category: Additional Commands
    response: kubectl annotate deployment frontend description=test
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=kubectl%20replace%20
- id: add-cmds-q40
  prompt: Remove the annotation description from deployment frontend
  type: command
  metadata:
    id: add-cmds-q40
    category: Additional Commands
    response: kubectl annotate deployment frontend description-
    links:
    - https://kubernetes.io/vi/docs/reference/kubectl/cheatsheet/#:~:text=kubectl%20label%20pods%20my,T%E1%BB%B1%20%C4%91%E1%BB%99ng
- id: add-cmds-q41
  prompt: Apply the configuration in deployment.yaml
  type: command
  metadata:
    id: add-cmds-q41
    category: Additional Commands
    response: kubectl apply -f deployment.yaml
    links:
    - https://kubernetes.io/pt-br/docs/reference/kubectl/cheatsheet/#:~:text=Manifestos%20Kubernetes%20podem%20ser%20definidos,podem%20ser%20usadas
- id: add-cmds-q42
  prompt: Use kubectl to edit deployment frontend
  type: command
  metadata:
    id: add-cmds-q42
    category: Additional Commands
    response: kubectl edit deployment frontend
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=3,the%20Deployment
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=Labels%3A%20%20%20%20,0
- id: cm-ops-q1
  prompt: 'Create a ConfigMap named ''app-config'' with key-value pairs: APP_COLOR=blue
    and APP_MODE=prod'
  type: command
  metadata:
    id: cm-ops-q1
    category: ConfigMap Operations
    response: kubectl create cm app-config --from-literal=APP_COLOR=blue --from-literal=APP_MODE=prod
    validator:
      type: ai
      expected: kubectl create cm app-config --from-literal=APP_COLOR=blue --from-literal=APP_MODE=prod
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=Define%20container%20environment%20variables%20using,ConfigMap%20data
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=apiVersion%3A%20v1%20kind%3A%20Pod%20metadata%3A,c%22%2C%20%22env%22
- id: cm-ops-q2
  prompt: Create a ConfigMap named 'game-config' from a configuration file located
    at '/configs/game.properties'
  type: command
  metadata:
    id: cm-ops-q2
    category: ConfigMap Operations
    response: kubectl create cm game-config --from-file=/configs/game.properties
    validator:
      type: ai
      expected: kubectl create cm game-config --from-file=/configs/game.properties
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=files%3A%20
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=)
- id: cm-ops-q3
  prompt: View the contents of a ConfigMap named 'db-config'
  type: command
  metadata:
    id: cm-ops-q3
    category: ConfigMap Operations
    response: kubectl describe cm db-config
    validator:
      type: ai
      expected: kubectl describe cm db-config
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=Define%20container%20environment%20variables%20using,ConfigMap%20data
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=pods%2Fpod,to%20clipboard
- id: cm-ops-q4
  prompt: Create a ConfigMap from all files in the '/configs' directory
  type: command
  metadata:
    id: cm-ops-q4
    category: ConfigMap Operations
    response: kubectl create cm app-settings --from-file=/configs
    validator:
      type: ai
      expected: kubectl create cm app-settings --from-file=/configs
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=files%3A%20
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=)
- id: cm-ops-q6
  prompt: Extract a ConfigMap to YAML format
  type: command
  metadata:
    id: cm-ops-q6
    category: ConfigMap Operations
    response: kubectl get cm app-config -o yaml > config.yaml
    validator:
      type: ai
      expected: kubectl get cm app-config -o yaml > config.yaml
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=Define%20container%20environment%20variables%20using,ConfigMap%20data
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=pods%2Fpod,to%20clipboard
- id: cm-ops-q7
  prompt: Update a value in an existing ConfigMap named 'app-config'
  type: command
  metadata:
    id: cm-ops-q7
    category: ConfigMap Operations
    response: kubectl edit cm app-config
    validator:
      type: ai
      expected: kubectl edit cm app-config
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=Define%20container%20environment%20variables%20using,ConfigMap%20data
- id: cm-ops-q8
  prompt: Create a ConfigMap named 'multi-config' with key-value pairs DB_URL=mysql://db,
    API_KEY=123456, and DEBUG=true from the command line
  type: command
  metadata:
    id: cm-ops-q8
    category: ConfigMap Operations
    response: kubectl create cm multi-config --from-literal=DB_URL=mysql://db --from-literal=API_KEY=123456
      --from-literal=DEBUG=true
    validator:
      type: ai
      expected: kubectl create cm multi-config --from-literal=DB_URL=mysql://db --from-literal=API_KEY=123456
        --from-literal=DEBUG=true
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=Define%20container%20environment%20variables%20using,ConfigMap%20data
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- id: cm-ops-q11
  prompt: Create a configmap named configmap-web-moon-html in namespace moon from
    the file /opt/course/15/web-moon.html with key index.html.
  type: command
  metadata:
    id: cm-ops-q11
    category: ConfigMap Operations
    response: kubectl -n moon create configmap configmap-web-moon-html --from-file=index.html=/opt/course/15/web-moon.html
- id: cm-ops-q10
  prompt: Create a ConfigMap from an env file
  type: command
  metadata:
    id: cm-ops-q10
    category: ConfigMap Operations
    response: kubectl create cm env-config --from-env-file=config.env
    validator:
      type: ai
      expected: kubectl create cm env-config --from-env-file=config.env
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=Define%20container%20environment%20variables%20using,ConfigMap%20data
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- id: ckad-sim::q5-sa-secret
  prompt: In namespace `neptune`, find the Secret associated with the ServiceAccount
    `neptune-sa-v2` and write its decoded token to the file `/opt/course/5/token`.
  type: live_k8s_edit
  pre_shell_cmds:
  - kubectl create namespace neptune
  - kubectl -n neptune create sa neptune-sa-v2
  - kubectl -n neptune create secret generic neptune-secret-1 --from-literal=token=$(echo
    -n my-secret-token-value | base64)
  - kubectl -n neptune annotate secret neptune-secret-1 kubernetes.io/service-account.name=neptune-sa-v2
  - mkdir -p /opt/course/5
  validation_steps:
  - cmd: cat /opt/course/5/token
    matcher: {}
  explanation: 'First, find the secret associated with the ServiceAccount `neptune-sa-v2`.
    You can do this by listing secrets in the `neptune` namespace and checking their
    annotations (`k -n neptune get secrets -o yaml`). The secret with the annotation
    `kubernetes.io/service-account.name: neptune-sa-v2` is the correct one. Then,
    get the token from the secret''s data, base64 decode it, and write it to the specified
    file. A quick way is `kubectl -n neptune get secret <secret-name> -o jsonpath=''{.data.token}''
    | base64 --decode > /opt/course/5/token`.'
  metadata:
    id: ckad-sim::q5-sa-secret
    type: live_k8s_edit
    category: Configuration & Security
    source: https://killer.sh/ckad
- id: ckad-sim::q6-readinessprobe
  prompt: Create a single Pod named `pod6` in namespace `default` with image `busybox:1.31.0`.
    The pod should run the command `touch /tmp/ready && sleep 1d`. Configure a readiness
    probe that executes `cat /tmp/ready`, with an `initialDelaySeconds` of 5 and a
    `periodSeconds` of 10. Create the pod and ensure it becomes ready.
  type: live_k8s_edit
  validation_steps:
  - cmd: kubectl get pod pod6 -o jsonpath='{.spec.containers[0].readinessProbe.initialDelaySeconds}'
    matcher: {}
  - cmd: kubectl get pod pod6 -o jsonpath='{.spec.containers[0].readinessProbe.periodSeconds}'
    matcher: {}
  - cmd: kubectl get pod pod6 -o jsonpath='{.spec.containers[0].command[2]}'
    matcher: {}
  - cmd: kubectl wait --for=condition=Ready pod/pod6 --timeout=30s
    matcher: {}
  explanation: A pod manifest can be generated using `kubectl run pod6 --image=busybox:1.31.0
    --command -- sh -c "touch /tmp/ready && sleep 1d" --dry-run=client -o yaml`. Then,
    edit the YAML to add the `readinessProbe` section to the container spec. The probe
    should have an `exec` action with the command, and the specified `initialDelaySeconds`
    and `periodSeconds`. Finally, create the pod with `kubectl apply -f <file.yaml>`.
    You can monitor its status with `kubectl get pod pod6 -w`.
  metadata:
    id: ckad-sim::q6-readinessprobe
    type: live_k8s_edit
    category: Configuration & Security
    source: https://killer.sh/ckad
- id: ckad-sim::q7-move-pod
  prompt: 'A pod named `webserver-sat-003` in namespace `saturn` needs to be moved
    to namespace `neptune`. The pod is identifiable by the annotation `description:
    this is the server for the E-Commerce System my-happy-shop`. Export its YAML,
    modify it to run in the `neptune` namespace, apply the new manifest, and then
    delete the original pod from `saturn`.'
  type: live_k8s_edit
  pre_shell_cmds:
  - kubectl create ns saturn
  - kubectl create ns neptune
  - "cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name:\
    \ webserver-sat-003\n  namespace: saturn\n  labels:\n    id: webserver-sat-003\n\
    \  annotations:\n    description: 'this is the server for the E-Commerce System\
    \ my-happy-shop'\nspec:\n  containers:\n  - name: webserver-sat\n    image: nginx:1.16.1-alpine\n\
    EOF\n"
  validation_steps:
  - cmd: kubectl -n neptune get pod webserver-sat-003 -o jsonpath='{.metadata.namespace}'
    matcher: {}
  - cmd: '! kubectl -n saturn get pod webserver-sat-003'
    matcher: {}
  explanation: The process involves exporting the Pod's YAML using `kubectl get pod
    <pod-name> -n <namespace> -o yaml`. Then, edit the file to change the `namespace`
    field and remove runtime-injected fields like `status`, `resourceVersion`, `uid`,
    and `creationTimestamp`. After saving the cleaned YAML, create the Pod in the
    new namespace with `kubectl apply -f <file.yaml>` and delete the original pod
    with `kubectl delete pod <pod-name> -n <old-namespace>`.
  metadata:
    id: ckad-sim::q7-move-pod
    type: live_k8s_edit
    category: Core Concepts
    source: https://killer.sh/ckad
- id: ckad-sim::q1-namespaces
  prompt: Get the list of all Namespaces in the cluster and save the output to `/opt/course/1/namespaces`.
    The list can contain other columns like `STATUS` or `AGE`.
  type: live_k8s_edit
  pre_shell_cmds:
  - mkdir -p /opt/course/1
  validation_steps:
  - cmd: grep -q default /opt/course/1/namespaces
    matcher: {}
  - cmd: grep -q kube-system /opt/course/1/namespaces
    matcher: {}
  explanation: The command `kubectl get namespaces` or its short form `k get ns` lists
    all namespaces. The output can be redirected to a file using `> /path/to/file`.
  metadata:
    id: ckad-sim::q1-namespaces
    type: live_k8s_edit
    category: Core Concepts
    source: https://killer.sh/ckad
- id: ckad-sim::q2-pods
  prompt: Create a single Pod named `pod1` of image `httpd:2.4.41-alpine` in Namespace
    `default`. The container must be named `pod1-container`. Then, write a command
    that outputs the status of this pod into the file `/opt/course/2/pod1-status-command.sh`.
  type: live_k8s_edit
  pre_shell_cmds:
  - mkdir -p /opt/course/2
  validation_steps:
  - cmd: kubectl get pod pod1 -o jsonpath='{.spec.containers[0].name}'
    matcher: {}
  - cmd: kubectl get pod pod1 -o jsonpath='{.spec.containers[0].image}'
    matcher: {}
  - cmd: sh /opt/course/2/pod1-status-command.sh
    matcher: {}
  explanation: A Pod can be created imperatively with `kubectl run` and `--dry-run=client
    -o yaml` to generate a manifest. The manifest can then be edited to meet specific
    requirements like the container name. A command to check the pod's status can
    use `kubectl describe pod <pod_name>` and `grep`, or `kubectl get pod <pod_name>`
    with a `jsonpath` expression like `{.status.phase}`. This command is then saved
    to the required file.
  metadata:
    id: ckad-sim::q2-pods
    type: live_k8s_edit
    category: Core Concepts
    source: https://killer.sh/ckad
- id: deploy-mgmt-q1
  prompt: Create a deployment named webapp with image nginx:1.17 and 3 replicas
  type: command
  metadata:
    id: deploy-mgmt-q1
    category: Deployment Management
    response: kubectl create deployment webapp --image=nginx:1.17 --replicas=3
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_create/kubectl_create_deployment/#:~:text=kubectl%20create%20deployment%20my,date
- id: deploy-mgmt-q2
  prompt: Generate a YAML file for a deployment with nginx image without creating
    it
  type: command
  metadata:
    id: deploy-mgmt-q2
    category: Deployment Management
    response: kubectl create deployment nginx --image=nginx --dry-run=client -o yaml
      > deploy.yaml
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_create/kubectl_create_deployment/#:~:text=)
- id: deploy-mgmt-q3
  prompt: Scale a deployment named 'frontend' to 5 replicas
  type: command
  metadata:
    id: deploy-mgmt-q3
    category: Deployment Management
    response: kubectl scale deployment frontend --replicas=5
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=You%20can%20scale%20a%20Deployment,by%20using%20the%20following%20command
- id: deploy-mgmt-q4
  prompt: Update the image of a deployment named 'webapp' to nginx:1.18
  type: command
  metadata:
    id: deploy-mgmt-q4
    category: Deployment Management
    response: kubectl set image deployment/webapp webapp=nginx:1.18
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=,of%20the%20Deployment
- id: deploy-mgmt-q5
  prompt: Check the rollout status of a deployment named 'frontend'
  type: command
  metadata:
    id: deploy-mgmt-q5
    category: Deployment Management
    response: kubectl rollout status deployment/frontend
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=You%20can%20check%20if%20a,returns%20a%20zero%20exit%20code
- id: deploy-mgmt-q6
  prompt: Roll back a deployment named 'webapp' to its previous version
  type: command
  metadata:
    id: deploy-mgmt-q6
    category: Deployment Management
    response: kubectl rollout undo deployment/webapp
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=1,rollback%20to%20the%20previous%20revision
- id: deploy-mgmt-q7
  prompt: Create a deployment with a record of the change-cause for future reference
  type: command
  metadata:
    id: deploy-mgmt-q7
    category: Deployment Management
    response: kubectl create deployment nginx --image=nginx --record
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=Labels%3A%20%20%20%20,80%2FTCP
- id: deploy-mgmt-q8
  prompt: View the history of a deployment named 'webapp'
  type: command
  metadata:
    id: deploy-mgmt-q8
    category: Deployment Management
    response: kubectl rollout history deployment/webapp
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=,rollout%20started
- id: deploy-mgmt-q9
  prompt: Pause the rollout of a deployment named 'frontend'
  type: command
  metadata:
    id: deploy-mgmt-q9
    category: Deployment Management
    response: kubectl rollout pause deployment/frontend
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=,following%20command
- id: deploy-mgmt-q10
  prompt: Resume the rollout of a deployment named 'frontend'
  type: command
  metadata:
    id: deploy-mgmt-q10
    category: Deployment Management
    response: kubectl rollout resume deployment/frontend
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#:~:text=,with%20all%20the%20new%20updates
- id: deploy-mgmt-q11
  prompt: View the details of a specific revision (e.g., 2) of a deployment named
    'webapp'
  type: command
  metadata:
    id: deploy-mgmt-q11
    category: Deployment Management
    response: kubectl rollout history deployment/webapp --revision=2
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#checking-rollout-history-of-a-deployment
- id: deploy-mgmt-q12
  prompt: Delete a deployment named 'frontend'
  type: command
  metadata:
    id: deploy-mgmt-q12
    category: Deployment Management
    response: kubectl delete deployment frontend
    links:
    - https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#deleting-a-deployment
- id: deploy-mgmt-q13
  prompt: Roll back the deployment api-new-c32 in namespace neptune to the previous
    revision.
  type: command
  metadata:
    id: deploy-mgmt-q13
    category: Deployment Management
    response: kubectl -n neptune rollout undo deployment api-new-c32
- id: deploy-mgmt-q14
  prompt: Restart the deployment web-moon in the moon namespace.
  type: command
  metadata:
    id: deploy-mgmt-q14
    category: Deployment Management
    response: kubectl -n moon rollout restart deployment web-moon
- id: ckad-sim::q4-helm-install
  prompt: In namespace `mercury`, install a new Helm release named `internal-issue-report-apache`
    from the `bitnami/apache` chart. The Deployment created by the chart should have
    2 replicas. Assume the `bitnami` repository has already been added and updated.
  type: live_k8s_edit
  pre_shell_cmds:
  - kubectl create namespace mercury
  - helm repo add bitnami https://charts.bitnami.com/bitnami
  - helm repo update
  validation_steps:
  - cmd: helm -n mercury status internal-issue-report-apache
    matcher: {}
  - cmd: kubectl -n mercury get deploy internal-issue-report-apache -o jsonpath='{.spec.replicas}'
    matcher: {}
  explanation: Use `helm install <release-name> <chart-name> --namespace <ns> --set
    <key>=<value>`. In this case, the command is `helm install internal-issue-report-apache
    bitnami/apache --namespace mercury --set replicaCount=2`. You can find the correct
    key (`replicaCount`) for setting replicas by using `helm show values bitnami/apache`.
  metadata:
    id: ckad-sim::q4-helm-install
    type: live_k8s_edit
    category: Helm
    source: https://killer.sh/ckad
- id: helm-q1
  prompt: What is the command to create a basic Helm chart named `my-chart`?
  type: command
  explanation: 'Use `helm create <chart-name>` to create a new Helm chart with a default
    structure. For example, `helm create my-chart` creates a directory named `my-chart`
    with the necessary files.

    '
  metadata:
    id: helm-q1
    category: Helm Basics
    response: helm create my-chart
    links:
    - https://helm.sh/docs/helm/helm_create/
- id: helm-q2
  prompt: How do you install the Helm chart located in `./my-chart` with the release
    name `my-release`?
  type: command
  explanation: 'Use `helm install <release-name> <chart-path>` to deploy an application.
    For example, `helm install my-release ./my-chart` installs the chart located in
    the `./my-chart` directory with the release name `my-release`.

    '
  metadata:
    id: helm-q2
    category: Helm Basics
    response: helm install my-release ./my-chart
    links:
    - https://helm.sh/docs/helm/helm_install/
- id: helm-q3
  prompt: How do you find all pending Helm deployments across all namespaces?
  type: command
  explanation: 'To list all pending Helm releases in every namespace, run `helm list
    --pending -A`. The `-A` or `--all-namespaces` flag is used to list releases across
    all namespaces.

    '
  metadata:
    id: helm-q3
    category: Helm Basics
    response: helm list --pending -A
    links:
    - https://helm.sh/docs/helm/helm_list/
- id: helm-q4
  prompt: How can you uninstall a Helm release named `my-release`?
  type: command
  explanation: 'To uninstall a release, use `helm uninstall <release_name>`. If the
    release is in another namespace, use the `-n <namespace>` flag. This removes all
    Kubernetes resources associated with the release.

    '
  metadata:
    id: helm-q4
    category: Helm Basics
    response: helm uninstall my-release
    links:
    - https://helm.sh/docs/helm/helm_uninstall/
- id: helm-q5
  prompt: How do you upgrade an existing Helm release named `my-release` using the
    chart in `./my-chart`?
  type: command
  explanation: 'The correct command is `helm upgrade my-release ./my-chart`. An answer
    like `helm release upgrade` is incomplete and uses incorrect syntax. The `upgrade`
    command requires the release name and the path to the chart.

    '
  metadata:
    id: helm-q5
    category: Helm Basics
    response: helm upgrade my-release ./my-chart
    links:
    - https://helm.sh/docs/helm/helm_upgrade/
- id: helm-q6
  prompt: How do you add the Prometheus community Helm repository from `https://prometheus-community.github.io/helm-charts`
    and name it `prometheus-community`?
  type: command
  explanation: 'Use `helm repo add prometheus-community https://prometheus-community.github.io/helm-charts`
    to add the Prometheus community chart repository.

    '
  metadata:
    id: helm-q6
    category: Helm Repositories
    response: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    links:
    - https://github.com/prometheus-community/helm-charts
- id: helm-q7
  prompt: What command is used to list configured Helm chart repositories?
  type: command
  explanation: '`helm repo list` (or `ls`) is used to list all configured chart repositories.

    '
  metadata:
    id: helm-q7
    category: Helm Repositories
    response: helm repo list
    links:
    - https://helm.sh/docs/helm/helm_repo/
- id: helm-q8
  prompt: What command is used to remove a Helm chart repository named `stable`?
  type: command
  explanation: '`helm repo remove [REPO]` is used to remove one or more chart repositories.

    '
  metadata:
    id: helm-q8
    category: Helm Repositories
    response: helm repo remove stable
    links:
    - https://helm.sh/docs/helm/helm_repo/
- id: helm-q9
  prompt: What command is used to update information from chart repositories?
  type: command
  explanation: '`helm repo update` (or `up`) is used to fetch the latest information
    from all configured chart repositories.

    '
  metadata:
    id: helm-q9
    category: Helm Repositories
    response: helm repo update
    links:
    - https://helm.sh/docs/helm/helm_repo/
- id: helm-q10
  prompt: What command is used to generate an index file for a chart repository in
    the current directory?
  type: command
  explanation: '`helm repo index [DIR]` generates an `index.yaml` file for a directory
    containing packaged charts, making it a valid chart repository.

    '
  metadata:
    id: helm-q10
    category: Helm Repositories
    response: helm repo index .
    links:
    - https://helm.sh/docs/helm/helm_repo/
- id: helm-q11
  prompt: Assuming the `bitnami` repository has been added, what command downloads
    the `wordpress` chart from it without installing it?
  type: command
  explanation: 'Use `helm pull [repo/chartname]` to download a chart to your local
    directory. Use the `--untar` flag to extract the chart after downloading.

    '
  metadata:
    id: helm-q11
    category: Helm Basics
    response: helm pull bitnami/wordpress
    links:
    - https://helm.sh/docs/helm/helm_pull/
- id: helm-q12
  prompt: How do you add the Bitnami chart repository from `https://charts.bitnami.com/bitnami`
    and name it `bitnami`?
  type: command
  explanation: 'Add the Bitnami repo with: `helm repo add bitnami https://charts.bitnami.com/bitnami`.

    Note that repository URLs are for the Helm client; opening them in a web browser
    may not work.

    '
  metadata:
    id: helm-q12
    category: Helm Repositories
    response: helm repo add bitnami https://charts.bitnami.com/bitnami
    links:
    - https://artifacthub.io/packages/helm/bitnami/node
- id: helm-q13
  prompt: Assuming the `bitnami` repository has been added, how do you print the contents
    of the `values.yaml` for the `bitnami/node` chart?
  type: command
  explanation: '`helm show values <chart>` displays the contents of the `values.yaml`
    file for a given chart. For example: `helm show values bitnami/node`.

    '
  metadata:
    id: helm-q13
    category: Helm Basics
    response: helm show values bitnami/node
    links:
    - https://helm.sh/docs/helm/helm_show/
- id: helm-q14
  prompt: Assuming the `bitnami` repository has been added, how do you install the
    `bitnami/node` chart as a release named `my-node`, setting the `replicaCount`
    value to 5?
  type: command
  explanation: 'You can override values in a chart''s `values.yaml` file at installation
    time using the `--set` flag. First, find the relevant key (e.g., with `helm show
    values bitnami/node | grep -i replica`). Then, install the chart with the override:
    `helm install my-node bitnami/node --set replicaCount=5`.

    '
  metadata:
    id: helm-q14
    category: Helm Basics
    response: helm install my-node bitnami/node --set replicaCount=5
    links:
    - https://artifacthub.io/packages/helm/bitnami/node
    - https://helm.sh/docs/helm/helm_install/
- id: helm-q15
  prompt: List all Helm releases in the mercury namespace.
  type: command
  metadata:
    id: helm-q15
    category: Helm Basics
    response: helm -n mercury ls
- id: helm-q16
  prompt: Uninstall the Helm release internal-issue-report-apiv1 in the mercury namespace.
  type: command
  metadata:
    id: helm-q16
    category: Helm Basics
    response: helm -n mercury uninstall internal-issue-report-apiv1
- id: helm-q17
  prompt: Update the Helm chart repositories.
  type: command
  metadata:
    id: helm-q17
    category: Helm Repositories
    response: helm repo update
- id: helm-q18
  prompt: Search the Bitnami repository for all available nginx chart versions.
  type: command
  metadata:
    id: helm-q18
    category: Helm Repositories
    response: helm search repo nginx --versions
- id: helm-q19
  prompt: Upgrade the Helm release internal-issue-report-apiv2 in namespace mercury
    to the latest nginx chart.
  type: command
  metadata:
    id: helm-q19
    category: Helm Basics
    response: helm -n mercury upgrade internal-issue-report-apiv2 bitnami/nginx
- id: helm-q20
  prompt: Install the Bitnami Apache chart as release internal-issue-report-apache
    in namespace mercury with 2 replicas and image debug enabled.
  type: command
  metadata:
    id: helm-q20
    category: Helm Basics
    response: helm -n mercury install internal-issue-report-apache bitnami/apache
      --set replicaCount=2 --set image.debug=true
- id: apply::service
  prompt: Create a service using the definition in example-service.yaml
  type: command
  validation_steps:
  - cmd: kubectl apply -f example-service.yaml
    matcher: {}
  metadata:
    id: apply::service
    type: command
    validator:
      type: ai
      expected: kubectl apply -f example-service.yaml
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: apply::controller
  prompt: Create a replication controller using the definition in example-controller.yaml
  type: command
  validation_steps:
  - cmd: kubectl apply -f example-controller.yaml
    matcher: {}
  metadata:
    id: apply::controller
    type: command
    validator:
      type: ai
      expected: kubectl apply -f example-controller.yaml
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: apply::directory
  prompt: Create the objects defined in all files within a directory
  type: command
  validation_steps:
  - cmd: kubectl apply -f <directory>
    matcher: {}
  metadata:
    id: apply::directory
    type: command
    validator:
      type: ai
      expected: kubectl apply -f <directory>
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: get::pods
  prompt: List all pods in plain-text output format
  type: command
  validation_steps:
  - cmd: kubectl get pods
    matcher: {}
  metadata:
    id: get::pods
    type: command
    validator:
      type: ai
      expected: kubectl get pods
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: get::pods-wide
  prompt: List all pods and include additional information such as node name
  type: command
  validation_steps:
  - cmd: kubectl get pods -o wide
    matcher: {}
  metadata:
    id: get::pods-wide
    type: command
    validator:
      type: ai
      expected: kubectl get pods -o wide
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: get::rc
  prompt: List the replication controller with the specified name using alias
  type: command
  validation_steps:
  - cmd: kubectl get rc <rc-name>
    matcher: {}
  metadata:
    id: get::rc
    type: command
    validator:
      type: ai
      expected: kubectl get rc <rc-name>
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: get::rc-svc
  prompt: List all replication controllers and services together
  type: command
  validation_steps:
  - cmd: kubectl get rc,services
    matcher: {}
  metadata:
    id: get::rc-svc
    type: command
    validator:
      type: ai
      expected: kubectl get rc,services
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: get::ds
  prompt: List all daemon sets
  type: command
  validation_steps:
  - cmd: kubectl get ds
    matcher: {}
  metadata:
    id: get::ds
    type: command
    validator:
      type: ai
      expected: kubectl get ds
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: get::pods-node
  prompt: List all pods running on node server01
  type: command
  validation_steps:
  - cmd: kubectl get pods --field-selector=spec.nodeName=server01
    matcher: {}
  metadata:
    id: get::pods-node
    type: command
    validator:
      type: ai
      expected: kubectl get pods --field-selector=spec.nodeName=server01
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: describe::node
  prompt: Display the details of the node with name <node-name>
  type: command
  validation_steps:
  - cmd: kubectl describe nodes <node-name>
    matcher: {}
  metadata:
    id: describe::node
    type: command
    validator:
      type: ai
      expected: kubectl describe nodes <node-name>
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: describe::pod
  prompt: Display the details of the pod with name <pod-name>
  type: command
  validation_steps:
  - cmd: kubectl describe pods/<pod-name>
    matcher: {}
  metadata:
    id: describe::pod
    type: command
    validator:
      type: ai
      expected: kubectl describe pods/<pod-name>
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: describe::pods-rc
  prompt: Display the details of all pods managed by the replication controller <rc-name>
  type: command
  validation_steps:
  - cmd: kubectl describe pods <rc-name>
    matcher: {}
  metadata:
    id: describe::pods-rc
    type: command
    validator:
      type: ai
      expected: kubectl describe pods <rc-name>
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: describe::pods
  prompt: Describe all pods
  type: command
  validation_steps:
  - cmd: kubectl describe pods
    matcher: {}
  metadata:
    id: describe::pods
    type: command
    validator:
      type: ai
      expected: kubectl describe pods
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: delete::pod-file
  prompt: Delete a pod using the definition in pod.yaml
  type: command
  validation_steps:
  - cmd: kubectl delete -f pod.yaml
    matcher: {}
  metadata:
    id: delete::pod-file
    type: command
    validator:
      type: ai
      expected: kubectl delete -f pod.yaml
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: delete::label
  prompt: Delete all pods and services with label '<label-key>=<label-value>'
  type: command
  validation_steps:
  - cmd: kubectl delete pods,services -l <label-key>=<label-value>
    matcher: {}
  metadata:
    id: delete::label
    type: command
    validator:
      type: ai
      expected: kubectl delete pods,services -l <label-key>=<label-value>
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: delete::all-pods
  prompt: Delete all pods, including uninitialized ones
  type: command
  validation_steps:
  - cmd: kubectl delete pods --all
    matcher: {}
  metadata:
    id: delete::all-pods
    type: command
    validator:
      type: ai
      expected: kubectl delete pods --all
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: exec::date
  prompt: Get output of 'date' from pod <pod-name>
  type: command
  validation_steps:
  - cmd: kubectl exec <pod-name> -- date
    matcher: {}
  metadata:
    id: exec::date
    type: command
    validator:
      type: ai
      expected: kubectl exec <pod-name> -- date
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: exec::date-container
  prompt: Get output of 'date' in container <container-name> of pod <pod-name>
  type: command
  validation_steps:
  - cmd: kubectl exec <pod-name> -c <container-name> -- date
    matcher: {}
  metadata:
    id: exec::date-container
    type: command
    validator:
      type: ai
      expected: kubectl exec <pod-name> -c <container-name> -- date
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: exec::bash
  prompt: Open an interactive bash shell in pod <pod-name>
  type: command
  validation_steps:
  - cmd: kubectl exec -ti <pod-name> -- /bin/bash
    matcher: {}
  metadata:
    id: exec::bash
    type: command
    validator:
      type: ai
      expected: kubectl exec -ti <pod-name> -- /bin/bash
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: logs::snapshot
  prompt: Return a snapshot of logs from pod <pod-name>
  type: command
  validation_steps:
  - cmd: kubectl logs <pod-name>
    matcher: {}
  metadata:
    id: logs::snapshot
    type: command
    validator:
      type: ai
      expected: kubectl logs <pod-name>
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: logs::stream
  prompt: Stream logs from pod <pod-name>
  type: command
  validation_steps:
  - cmd: kubectl logs -f <pod-name>
    matcher: {}
  metadata:
    id: logs::stream
    type: command
    validator:
      type: ai
      expected: kubectl logs -f <pod-name>
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: diff::file
  prompt: View a diff of resources in pod.json
  type: command
  validation_steps:
  - cmd: kubectl diff -f pod.json
    matcher: {}
  metadata:
    id: diff::file
    type: command
    validator:
      type: ai
      expected: kubectl diff -f pod.json
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: diff::stdin
  prompt: View a diff reading file from stdin
  type: command
  validation_steps:
  - cmd: kubectl diff -f -
    matcher: {}
  metadata:
    id: diff::stdin
    type: command
    validator:
      type: ai
      expected: kubectl diff -f -
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: plugin::invoke
  prompt: Invoke the plugin named 'hello'
  type: command
  validation_steps:
  - cmd: kubectl hello
    matcher: {}
  metadata:
    id: plugin::invoke
    type: command
    validator:
      type: ai
      expected: kubectl hello
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: plugin::list
  prompt: List available kubectl-compatible plugins
  type: command
  validation_steps:
  - cmd: kubectl plugin list
    matcher: {}
  metadata:
    id: plugin::list
    type: command
    validator:
      type: ai
      expected: kubectl plugin list
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: plugin::list-warning
  prompt: What warning does 'kubectl plugin list' show when a plugin is not executable?
  type: command
  validation_steps:
  - cmd: 'warning: <plugin-path> identified as a plugin, but it is not executable'
    matcher: {}
  metadata:
    id: plugin::list-warning
    type: command
    validator:
      type: ai
      expected: 'warning: <plugin-path> identified as a plugin, but it is not executable'
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: plugin::whoami
  prompt: Invoke the plugin named 'whoami'
  type: command
  validation_steps:
  - cmd: kubectl whoami
    matcher: {}
  metadata:
    id: plugin::whoami
    type: command
    validator:
      type: ai
      expected: kubectl whoami
    category: Kubectl Common Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#examples-common-operations
- id: operations::alpha
  prompt: List the available commands that correspond to alpha features, which are
    not enabled in Kubernetes clusters by default.
  type: command
  validation_steps:
  - cmd: kubectl alpha
    matcher: {}
  metadata:
    id: operations::alpha
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::annotate
  prompt: Add or update the annotations of one or more resources.
  type: command
  validation_steps:
  - cmd: kubectl annotate
    matcher: {}
  metadata:
    id: operations::annotate
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::api-resources
  prompt: List the API resources that are available.
  type: command
  validation_steps:
  - cmd: kubectl api-resources
    matcher: {}
  metadata:
    id: operations::api-resources
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::api-versions
  prompt: List the API versions that are available.
  type: command
  validation_steps:
  - cmd: kubectl api-versions
    matcher: {}
  metadata:
    id: operations::api-versions
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::apply
  prompt: Apply a configuration change to a resource from a file or stdin.
  type: command
  validation_steps:
  - cmd: kubectl apply
    matcher: {}
  metadata:
    id: operations::apply
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::attach
  prompt: Attach to a running container either to view the output stream or interact
    with the container (stdin).
  type: command
  validation_steps:
  - cmd: kubectl attach
    matcher: {}
  metadata:
    id: operations::attach
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::auth
  prompt: Inspect authorization.
  type: command
  validation_steps:
  - cmd: kubectl auth
    matcher: {}
  metadata:
    id: operations::auth
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::autoscale
  prompt: Automatically scale the set of pods that are managed by a replication controller.
  type: command
  validation_steps:
  - cmd: kubectl autoscale
    matcher: {}
  metadata:
    id: operations::autoscale
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::certificate
  prompt: Modify certificate resources.
  type: command
  validation_steps:
  - cmd: kubectl certificate
    matcher: {}
  metadata:
    id: operations::certificate
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::cluster-info
  prompt: Display endpoint information about the master and services in the cluster.
  type: command
  validation_steps:
  - cmd: kubectl cluster-info
    matcher: {}
  metadata:
    id: operations::cluster-info
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::completion
  prompt: Output shell completion code for the specified shell (bash or zsh).
  type: command
  validation_steps:
  - cmd: kubectl completion
    matcher: {}
  metadata:
    id: operations::completion
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::config
  prompt: Modifies kubeconfig files. See the individual subcommands for details.
  type: command
  validation_steps:
  - cmd: kubectl config
    matcher: {}
  metadata:
    id: operations::config
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::convert
  prompt: Convert config files between different API versions. Both YAML and JSON
    formats are accepted.
  type: command
  validation_steps:
  - cmd: kubectl convert
    matcher: {}
  metadata:
    id: operations::convert
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::cordon
  prompt: Mark node as unschedulable.
  type: command
  validation_steps:
  - cmd: kubectl cordon
    matcher: {}
  metadata:
    id: operations::cordon
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::cp
  prompt: Copy files and directories to and from containers.
  type: command
  validation_steps:
  - cmd: kubectl cp
    matcher: {}
  metadata:
    id: operations::cp
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::create
  prompt: Create one or more resources from a file or stdin.
  type: command
  validation_steps:
  - cmd: kubectl create
    matcher: {}
  metadata:
    id: operations::create
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::delete
  prompt: Delete resources either from a file, stdin, or specifying label selectors,
    names, resource selectors, or resources.
  type: command
  validation_steps:
  - cmd: kubectl delete
    matcher: {}
  metadata:
    id: operations::delete
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::describe
  prompt: Display the detailed state of one or more resources.
  type: command
  validation_steps:
  - cmd: kubectl describe
    matcher: {}
  metadata:
    id: operations::describe
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::diff
  prompt: Diff file or stdin against live configuration.
  type: command
  validation_steps:
  - cmd: kubectl diff
    matcher: {}
  metadata:
    id: operations::diff
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::drain
  prompt: Drain node in preparation for maintenance.
  type: command
  validation_steps:
  - cmd: kubectl drain
    matcher: {}
  metadata:
    id: operations::drain
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::edit
  prompt: Edit and update the definition of one or more resources on the server by
    using the default editor.
  type: command
  validation_steps:
  - cmd: kubectl edit
    matcher: {}
  metadata:
    id: operations::edit
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::events
  prompt: List events
  type: command
  validation_steps:
  - cmd: kubectl events
    matcher: {}
  metadata:
    id: operations::events
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::exec
  prompt: Execute a command against a container in a pod.
  type: command
  validation_steps:
  - cmd: kubectl exec
    matcher: {}
  metadata:
    id: operations::exec
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::explain
  prompt: Get documentation of various resources. For instance pods, nodes, services,
    etc.
  type: command
  validation_steps:
  - cmd: kubectl explain
    matcher: {}
  metadata:
    id: operations::explain
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::expose
  prompt: Expose a replication controller, service, or pod as a new Kubernetes service.
  type: command
  validation_steps:
  - cmd: kubectl expose
    matcher: {}
  metadata:
    id: operations::expose
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::get
  prompt: List one or more resources.
  type: command
  validation_steps:
  - cmd: kubectl get
    matcher: {}
  metadata:
    id: operations::get
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::kustomize
  prompt: List a set of API resources generated from instructions in a kustomization.yaml
    file.
  type: command
  validation_steps:
  - cmd: kubectl kustomize
    matcher: {}
  metadata:
    id: operations::kustomize
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::label
  prompt: Add or update the labels of one or more resources.
  type: command
  validation_steps:
  - cmd: kubectl label
    matcher: {}
  metadata:
    id: operations::label
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::logs
  prompt: Print the logs for a container in a pod.
  type: command
  validation_steps:
  - cmd: kubectl logs
    matcher: {}
  metadata:
    id: operations::logs
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::options
  prompt: List of global command-line options, which apply to all commands.
  type: command
  validation_steps:
  - cmd: kubectl options
    matcher: {}
  metadata:
    id: operations::options
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::patch
  prompt: Update one or more fields of a resource by using the strategic merge patch
    process.
  type: command
  validation_steps:
  - cmd: kubectl patch
    matcher: {}
  metadata:
    id: operations::patch
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::plugin
  prompt: Provides utilities for interacting with plugins.
  type: command
  validation_steps:
  - cmd: kubectl plugin
    matcher: {}
  metadata:
    id: operations::plugin
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::port-forward
  prompt: Forward one or more local ports to a pod.
  type: command
  validation_steps:
  - cmd: kubectl port-forward
    matcher: {}
  metadata:
    id: operations::port-forward
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::proxy
  prompt: Run a proxy to the Kubernetes API server.
  type: command
  validation_steps:
  - cmd: kubectl proxy
    matcher: {}
  metadata:
    id: operations::proxy
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::replace
  prompt: Replace a resource from a file or stdin.
  type: command
  validation_steps:
  - cmd: kubectl replace
    matcher: {}
  metadata:
    id: operations::replace
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::rollout
  prompt: Manage the rollout of a resource.
  type: command
  validation_steps:
  - cmd: kubectl rollout
    matcher: {}
  metadata:
    id: operations::rollout
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::run
  prompt: Run a specified image on the cluster.
  type: command
  validation_steps:
  - cmd: kubectl run
    matcher: {}
  metadata:
    id: operations::run
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::scale
  prompt: Update the size of the specified replication controller.
  type: command
  validation_steps:
  - cmd: kubectl scale
    matcher: {}
  metadata:
    id: operations::scale
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::set
  prompt: Configure application resources.
  type: command
  validation_steps:
  - cmd: kubectl set
    matcher: {}
  metadata:
    id: operations::set
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::taint
  prompt: Update the taints on one or more nodes.
  type: command
  validation_steps:
  - cmd: kubectl taint
    matcher: {}
  metadata:
    id: operations::taint
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::top
  prompt: Display Resource (CPU/Memory/Storage) usage of pod or node.
  type: command
  validation_steps:
  - cmd: kubectl top
    matcher: {}
  metadata:
    id: operations::top
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::uncordon
  prompt: Mark node as schedulable.
  type: command
  validation_steps:
  - cmd: kubectl uncordon
    matcher: {}
  metadata:
    id: operations::uncordon
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::version
  prompt: Display the Kubernetes version running on the client and server.
  type: command
  validation_steps:
  - cmd: kubectl version
    matcher: {}
  metadata:
    id: operations::version
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: operations::wait
  prompt: 'Experimental: Wait for a specific condition on one or many resources.'
  type: command
  validation_steps:
  - cmd: kubectl wait
    matcher: {}
  metadata:
    id: operations::wait
    type: command
    category: Kubectl Operations
    citation: https://kubernetes.io/docs/reference/kubectl/#operations
- id: ns-ops-q1
  prompt: Create a new namespace called 'development'
  type: command
  metadata:
    id: ns-ops-q1
    category: Namespace Operations
    response: kubectl create namespace development
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_create/kubectl_create_namespace/#:~:text=,namespace
- id: ns-ops-q2
  prompt: Set the current context to use the 'production' namespace by default
  type: command
  metadata:
    id: ns-ops-q2
    category: Namespace Operations
    response: kubectl config set-context --current --namespace=production
    links:
    - https://kubernetes.io/pt-br/docs/reference/kubectl/cheatsheet/#:~:text=)
- id: ns-ops-q3
  prompt: Verify which namespace is currently being used in your context
  type: command
  metadata:
    id: ns-ops-q3
    category: Namespace Operations
    response: 'kubectl config view --minify | grep namespace:'
    links:
    - https://kubernetes.io/pt-br/docs/reference/kubectl/cheatsheet/#:~:text=kn%20para%20definir%20namespace,%3B%20f
- id: ns-ops-q4
  prompt: Create a new namespace called 'testing' and output its YAML definition
  type: command
  metadata:
    id: ns-ops-q4
    category: Namespace Operations
    response: kubectl create ns testing --dry-run=client -o yaml
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_create/kubectl_create_namespace/#:~:text=Create%20a%20namespace%20with%20the,specified%20name
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_create/kubectl_create_namespace/#:~:text=)
- id: ns-ops-q5
  prompt: List all resources across all namespaces
  type: command
  metadata:
    id: ns-ops-q5
    category: Namespace Operations
    response: kubectl get all -A
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=A%20note%20on%20%60
- id: ns-ops-q6
  prompt: List all pods in the 'kube-system' namespace
  type: command
  metadata:
    id: ns-ops-q6
    category: Namespace Operations
    response: kubectl get pods -n kube-system
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=kubectl%20run%20nginx%20,in%20the%20namespace%20of%20mynamespace
- id: ns-ops-q7
  prompt: Create a pod in the 'development' namespace
  type: command
  metadata:
    id: ns-ops-q7
    category: Namespace Operations
    response: kubectl run nginx --image=nginx -n development
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=kubectl%20run%20nginx%20,in%20the%20namespace%20of%20mynamespace
- id: ns-ops-q8
  prompt: Delete a namespace called 'testing' and all its resources
  type: command
  metadata:
    id: ns-ops-q8
    category: Namespace Operations
    response: kubectl delete namespace testing
    links:
    - https://kubernetes.io/docs/tasks/administer-cluster/namespaces/#:~:text=Delete%20a%20namespace%20with
- id: ns-ops-q9
  prompt: List all namespaces in the cluster
  type: command
  metadata:
    id: ns-ops-q9
    category: Namespace Operations
    response: kubectl get namespaces
    links:
    - https://kubernetes.io/docs/tasks/administer-cluster/namespaces/#:~:text=Viewing%20namespaces
- id: ns-ops-q10
  prompt: Create a resource quota for a namespace limiting it to 10 pods
  type: command
  metadata:
    id: ns-ops-q10
    category: Namespace Operations
    response: kubectl create quota ns-quota --hard=pods=10 -n development
    links:
    - https://kubernetes.io/docs/concepts/policy/resource-quotas/#:~:text=kubectl%20create%20namespace%20myspace
- id: pod-mgmt-q1
  prompt: Create a pod named nginx using the nginx image and expose port 80
  type: command
  metadata:
    id: pod-mgmt-q1
    category: Pod Management
    response: kubectl run nginx --image=nginx --port=80
    validator:
      type: ai
      expected: kubectl run nginx --image=nginx --port=80
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_run/#:~:text=,port%3D5701
- id: pod-mgmt-q2
  prompt: Create a pod named busybox using the busybox image that runs the command
    'sleep 3600'
  type: command
  metadata:
    id: pod-mgmt-q2
    category: Pod Management
    response: kubectl run busybox --image=busybox -- sleep 3600
    validator:
      type: ai
      expected: kubectl run busybox --image=busybox -- sleep 3600
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_run/#:~:text=,argN)
- id: pod-mgmt-q3
  prompt: Generate a YAML definition file for a pod named nginx, using the nginx image,
    without creating it
  type: command
  review: true
  metadata:
    id: pod-mgmt-q3
    category: Pod Management
    response: kubectl run nginx --image=nginx --dry-run=client -o yaml > nginx.yaml
    validator:
      type: ai
      expected: kubectl run nginx --image=nginx --dry-run=client -o yaml > nginx.yaml
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_run/#:~:text=,run%3Dclient
- id: pod-mgmt-q4
  prompt: Create a pod named 'nginx' that runs the latest nginx image and sets an
    environment variable DB_URL=postgresql://db
  type: command
  review: true
  metadata:
    id: pod-mgmt-q4
    category: Pod Management
    response: kubectl run nginx --image=nginx --env="DB_URL=postgresql://db"
    validator:
      type: ai
      expected: kubectl run nginx --image=nginx --env="DB_URL=postgresql://db"
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_run/#:~:text=,env%3D%22POD_NAMESPACE%3Ddefault
- id: pod-mgmt-q5
  prompt: Extract the YAML definition of a running pod named 'webapp' in the 'development'
    namespace
  type: command
  metadata:
    id: pod-mgmt-q5
    category: Pod Management
    response: kubectl get pod webapp -n development -o yaml > webapp.yaml
    validator:
      type: ai
      expected: kubectl get pod webapp -n development -o yaml > webapp.yaml
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=kubectl%20get%20deployment%20my,Get%20a%20pod%27s%20YAML
- id: pod-mgmt-q6
  prompt: Create a pod named nginx using the nginx image and set labels app=web and
    tier=frontend
  type: command
  metadata:
    id: pod-mgmt-q6
    category: Pod Management
    response: kubectl run nginx --image=nginx --labels="app=web,tier=frontend"
    validator:
      type: ai
      expected: kubectl run nginx --image=nginx --labels="app=web,tier=frontend"
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_run/#:~:text=,labels%3D%22app%3Dhazelcast%2Cenv%3Dprod
- id: pod-mgmt-q7
  prompt: Create an interactive temporary pod named 'my-shell' using the Ubuntu image
    to troubleshoot cluster issues
  type: command
  metadata:
    id: pod-mgmt-q7
    category: Pod Management
    response: kubectl run my-shell --rm -i --tty --image=ubuntu -- bash
    validator:
      type: ai
      expected: kubectl run my-shell --rm -i --tty --image=ubuntu -- bash
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_run/#:~:text=,restart%3DNever
- id: pod-mgmt-q13
  prompt: Add a security context to the container in deployment holy-api (namespace
    pluto) to disable privilege escalation and privileged mode.
  type: command
  metadata:
    id: pod-mgmt-q13
    category: Pod Management
    response: "securityContext:\n  allowPrivilegeEscalation: false\n  privileged:\
      \ false\n"
- id: pod-mgmt-q8
  prompt: Get detailed information about a pod named 'nginx'
  type: command
  metadata:
    id: pod-mgmt-q8
    category: Pod Management
    response: kubectl describe pod nginx
    validator:
      type: ai
      expected: kubectl describe pod nginx
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_describe/
- id: pod-mgmt-q10
  prompt: Delete a pod named 'nginx'
  type: command
  metadata:
    id: pod-mgmt-q10
    category: Pod Management
    response: kubectl delete pod nginx
    validator:
      type: ai
      expected: kubectl delete pod nginx
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_delete/
- id: pod-mgmt-q11
  prompt: View the logs for a pod named 'webapp'
  type: command
  metadata:
    id: pod-mgmt-q11
    category: Pod Management
    response: kubectl logs webapp
    validator:
      type: ai
      expected: kubectl logs webapp
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_logs/
- id: pod-mgmt-q12
  prompt: Execute the 'env' command in a pod named 'nginx'
  type: command
  metadata:
    id: pod-mgmt-q12
    category: Pod Management
    response: kubectl exec nginx -- env
    validator:
      type: ai
      expected: kubectl exec nginx -- env
    links:
    - https://kubernetes.io/docs/tasks/debug/debug-application/debug-running-pod/#executing-commands-in-a-container
- id: pod-mgmt-q9
  prompt: Create a temporary, interactive pod named 'curl1' using the 'curlimages/curl'
    image to run a curl command against an internal service at 10.244.0.4
  type: command
  metadata:
    id: pod-mgmt-q9
    category: Pod Management
    response: kubectl run curl1 --image=curlimages/curl -i -t --rm --restart=Never
      -- curl 10.244.0.4
    validator:
      type: ai
      expected: kubectl run curl1 --image=curlimages/curl -i -t --rm --restart=Never
        -- curl 10.244.0.4
    links:
    - https://kubernetes.io/docs/reference/kubectl/generated/kubectl_run/#:~:text=,restart%3DNever
- id: binding::apiversion
  prompt: What is the API version for Binding?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: binding::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: binding::namespaced
  prompt: Is Binding a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: binding::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: componentstatus::shortnames
  prompt: What is the shortname for ComponentStatus?
  type: command
  validation_steps:
  - cmd: cs
    matcher: {}
  metadata:
    id: componentstatus::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: componentstatus::apiversion
  prompt: What is the API version for ComponentStatus?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: componentstatus::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: componentstatus::namespaced
  prompt: Is ComponentStatus a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: componentstatus::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: configmap::shortnames
  prompt: What is the shortname for ConfigMap?
  type: command
  validation_steps:
  - cmd: cm
    matcher: {}
  metadata:
    id: configmap::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: configmap::apiversion
  prompt: What is the API version for ConfigMap?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: configmap::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: configmap::namespaced
  prompt: Is ConfigMap a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: configmap::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: endpoints::shortnames
  prompt: What is the shortname for Endpoints?
  type: command
  validation_steps:
  - cmd: ep
    matcher: {}
  metadata:
    id: endpoints::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: endpoints::apiversion
  prompt: What is the API version for Endpoints?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: endpoints::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: endpoints::namespaced
  prompt: Is Endpoints a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: endpoints::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: event::shortnames
  prompt: What is the shortname for Event?
  type: command
  validation_steps:
  - cmd: ev
    matcher: {}
  metadata:
    id: event::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: event::apiversion
  prompt: What is the API version for Event?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: event::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: event::namespaced
  prompt: Is Event a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: event::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: limitrange::shortnames
  prompt: What is the shortname for LimitRange?
  type: command
  validation_steps:
  - cmd: limits
    matcher: {}
  metadata:
    id: limitrange::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: limitrange::apiversion
  prompt: What is the API version for LimitRange?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: limitrange::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: limitrange::namespaced
  prompt: Is LimitRange a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: limitrange::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: namespace::shortnames
  prompt: What is the shortname for Namespace?
  type: command
  validation_steps:
  - cmd: ns
    matcher: {}
  metadata:
    id: namespace::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: namespace::apiversion
  prompt: What is the API version for Namespace?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: namespace::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: namespace::namespaced
  prompt: Is Namespace a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: namespace::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: node::shortnames
  prompt: What is the shortname for Node?
  type: command
  validation_steps:
  - cmd: 'no'
    matcher: {}
  metadata:
    id: node::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: node::apiversion
  prompt: What is the API version for Node?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: node::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: node::namespaced
  prompt: Is Node a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: node::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: persistentvolumeclaim::shortnames
  prompt: What is the shortname for PersistentVolumeClaim?
  type: command
  validation_steps:
  - cmd: pvc
    matcher: {}
  metadata:
    id: persistentvolumeclaim::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: persistentvolumeclaim::apiversion
  prompt: What is the API version for PersistentVolumeClaim?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: persistentvolumeclaim::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: persistentvolumeclaim::namespaced
  prompt: Is PersistentVolumeClaim a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: persistentvolumeclaim::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: persistentvolume::shortnames
  prompt: What is the shortname for PersistentVolume?
  type: command
  validation_steps:
  - cmd: pv
    matcher: {}
  metadata:
    id: persistentvolume::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: persistentvolume::apiversion
  prompt: What is the API version for PersistentVolume?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: persistentvolume::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: persistentvolume::namespaced
  prompt: Is PersistentVolume a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: persistentvolume::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: pod::shortnames
  prompt: What is the shortname for Pod?
  type: command
  validation_steps:
  - cmd: po
    matcher: {}
  metadata:
    id: pod::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: pod::apiversion
  prompt: What is the API version for Pod?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: pod::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: pod::namespaced
  prompt: Is Pod a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: pod::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: podtemplate::apiversion
  prompt: What is the API version for PodTemplate?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: podtemplate::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: podtemplate::namespaced
  prompt: Is PodTemplate a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: podtemplate::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: replicationcontroller::shortnames
  prompt: What is the shortname for ReplicationController?
  type: command
  validation_steps:
  - cmd: rc
    matcher: {}
  metadata:
    id: replicationcontroller::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: replicationcontroller::apiversion
  prompt: What is the API version for ReplicationController?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: replicationcontroller::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: replicationcontroller::namespaced
  prompt: Is ReplicationController a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: replicationcontroller::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: resourcequota::shortnames
  prompt: What is the shortname for ResourceQuota?
  type: command
  validation_steps:
  - cmd: quota
    matcher: {}
  metadata:
    id: resourcequota::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: resourcequota::apiversion
  prompt: What is the API version for ResourceQuota?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: resourcequota::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: resourcequota::namespaced
  prompt: Is ResourceQuota a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: resourcequota::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: secret::apiversion
  prompt: What is the API version for Secret?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: secret::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: secret::namespaced
  prompt: Is Secret a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: secret::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: serviceaccount::shortnames
  prompt: What is the shortname for ServiceAccount?
  type: command
  validation_steps:
  - cmd: sa
    matcher: {}
  metadata:
    id: serviceaccount::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: serviceaccount::apiversion
  prompt: What is the API version for ServiceAccount?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: serviceaccount::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: serviceaccount::namespaced
  prompt: Is ServiceAccount a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: serviceaccount::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: service::shortnames
  prompt: What is the shortname for Service?
  type: command
  validation_steps:
  - cmd: svc
    matcher: {}
  metadata:
    id: service::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: service::apiversion
  prompt: What is the API version for Service?
  type: command
  validation_steps:
  - cmd: v1
    matcher: {}
  metadata:
    id: service::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: service::namespaced
  prompt: Is Service a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: service::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: mutatingwebhookconfiguration::apiversion
  prompt: What is the API version for MutatingWebhookConfiguration?
  type: command
  validation_steps:
  - cmd: admissionregistration.k8s.io/v1
    matcher: {}
  metadata:
    id: mutatingwebhookconfiguration::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: mutatingwebhookconfiguration::namespaced
  prompt: Is MutatingWebhookConfiguration a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: mutatingwebhookconfiguration::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: validatingwebhookconfiguration::apiversion
  prompt: What is the API version for ValidatingWebhookConfiguration?
  type: command
  validation_steps:
  - cmd: admissionregistration.k8s.io/v1
    matcher: {}
  metadata:
    id: validatingwebhookconfiguration::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: validatingwebhookconfiguration::namespaced
  prompt: Is ValidatingWebhookConfiguration a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: validatingwebhookconfiguration::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: customresourcedefinition::shortnames
  prompt: What is the shortname for CustomResourceDefinition?
  type: command
  validation_steps:
  - cmd: crd,crds
    matcher: {}
  metadata:
    id: customresourcedefinition::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: customresourcedefinition::apiversion
  prompt: What is the API version for CustomResourceDefinition?
  type: command
  validation_steps:
  - cmd: apiextensions.k8s.io/v1
    matcher: {}
  metadata:
    id: customresourcedefinition::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: customresourcedefinition::namespaced
  prompt: Is CustomResourceDefinition a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: customresourcedefinition::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: apiservice::apiversion
  prompt: What is the API version for APIService?
  type: command
  validation_steps:
  - cmd: apiregistration.k8s.io/v1
    matcher: {}
  metadata:
    id: apiservice::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: apiservice::namespaced
  prompt: Is APIService a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: apiservice::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: controllerrevision::apiversion
  prompt: What is the API version for ControllerRevision?
  type: command
  validation_steps:
  - cmd: apps/v1
    matcher: {}
  metadata:
    id: controllerrevision::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: controllerrevision::namespaced
  prompt: Is ControllerRevision a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: controllerrevision::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: daemonset::shortnames
  prompt: What is the shortname for DaemonSet?
  type: command
  validation_steps:
  - cmd: ds
    matcher: {}
  metadata:
    id: daemonset::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: daemonset::apiversion
  prompt: What is the API version for DaemonSet?
  type: command
  validation_steps:
  - cmd: apps/v1
    matcher: {}
  metadata:
    id: daemonset::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: daemonset::namespaced
  prompt: Is DaemonSet a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: daemonset::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: deployment::shortnames
  prompt: What is the shortname for Deployment?
  type: command
  validation_steps:
  - cmd: deploy
    matcher: {}
  metadata:
    id: deployment::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: deployment::apiversion
  prompt: What is the API version for Deployment?
  type: command
  validation_steps:
  - cmd: apps/v1
    matcher: {}
  metadata:
    id: deployment::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: deployment::namespaced
  prompt: Is Deployment a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: deployment::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: replicaset::shortnames
  prompt: What is the shortname for ReplicaSet?
  type: command
  validation_steps:
  - cmd: rs
    matcher: {}
  metadata:
    id: replicaset::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: replicaset::apiversion
  prompt: What is the API version for ReplicaSet?
  type: command
  validation_steps:
  - cmd: apps/v1
    matcher: {}
  metadata:
    id: replicaset::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: replicaset::namespaced
  prompt: Is ReplicaSet a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: replicaset::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: statefulset::shortnames
  prompt: What is the shortname for StatefulSet?
  type: command
  validation_steps:
  - cmd: sts
    matcher: {}
  metadata:
    id: statefulset::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: statefulset::apiversion
  prompt: What is the API version for StatefulSet?
  type: command
  validation_steps:
  - cmd: apps/v1
    matcher: {}
  metadata:
    id: statefulset::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: statefulset::namespaced
  prompt: Is StatefulSet a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: statefulset::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: tokenreview::apiversion
  prompt: What is the API version for TokenReview?
  type: command
  validation_steps:
  - cmd: authentication.k8s.io/v1
    matcher: {}
  metadata:
    id: tokenreview::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: tokenreview::namespaced
  prompt: Is TokenReview a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: tokenreview::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: localsubjectaccessreview::apiversion
  prompt: What is the API version for LocalSubjectAccessReview?
  type: command
  validation_steps:
  - cmd: authorization.k8s.io/v1
    matcher: {}
  metadata:
    id: localsubjectaccessreview::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: localsubjectaccessreview::namespaced
  prompt: Is LocalSubjectAccessReview a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: localsubjectaccessreview::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: selfsubjectaccessreview::apiversion
  prompt: What is the API version for SelfSubjectAccessReview?
  type: command
  validation_steps:
  - cmd: authorization.k8s.io/v1
    matcher: {}
  metadata:
    id: selfsubjectaccessreview::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: selfsubjectaccessreview::namespaced
  prompt: Is SelfSubjectAccessReview a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: selfsubjectaccessreview::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: selfsubjectrulesreview::apiversion
  prompt: What is the API version for SelfSubjectRulesReview?
  type: command
  validation_steps:
  - cmd: authorization.k8s.io/v1
    matcher: {}
  metadata:
    id: selfsubjectrulesreview::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: selfsubjectrulesreview::namespaced
  prompt: Is SelfSubjectRulesReview a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: selfsubjectrulesreview::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: subjectaccessreview::apiversion
  prompt: What is the API version for SubjectAccessReview?
  type: command
  validation_steps:
  - cmd: authorization.k8s.io/v1
    matcher: {}
  metadata:
    id: subjectaccessreview::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: subjectaccessreview::namespaced
  prompt: Is SubjectAccessReview a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: subjectaccessreview::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: horizontalpodautoscaler::shortnames
  prompt: What is the shortname for HorizontalPodAutoscaler?
  type: command
  validation_steps:
  - cmd: hpa
    matcher: {}
  metadata:
    id: horizontalpodautoscaler::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: horizontalpodautoscaler::apiversion
  prompt: What is the API version for HorizontalPodAutoscaler?
  type: command
  validation_steps:
  - cmd: autoscaling/v2
    matcher: {}
  metadata:
    id: horizontalpodautoscaler::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: horizontalpodautoscaler::namespaced
  prompt: Is HorizontalPodAutoscaler a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: horizontalpodautoscaler::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: cronjob::shortnames
  prompt: What is the shortname for CronJob?
  type: command
  validation_steps:
  - cmd: cj
    matcher: {}
  metadata:
    id: cronjob::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: cronjob::apiversion
  prompt: What is the API version for CronJob?
  type: command
  validation_steps:
  - cmd: batch/v1
    matcher: {}
  metadata:
    id: cronjob::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: cronjob::namespaced
  prompt: Is CronJob a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: cronjob::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: job::apiversion
  prompt: What is the API version for Job?
  type: command
  validation_steps:
  - cmd: batch/v1
    matcher: {}
  metadata:
    id: job::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: job::namespaced
  prompt: Is Job a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: job::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: certificatesigningrequest::shortnames
  prompt: What is the shortname for CertificateSigningRequest?
  type: command
  validation_steps:
  - cmd: csr
    matcher: {}
  metadata:
    id: certificatesigningrequest::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: certificatesigningrequest::apiversion
  prompt: What is the API version for CertificateSigningRequest?
  type: command
  validation_steps:
  - cmd: certificates.k8s.io/v1
    matcher: {}
  metadata:
    id: certificatesigningrequest::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: certificatesigningrequest::namespaced
  prompt: Is CertificateSigningRequest a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: certificatesigningrequest::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: lease::apiversion
  prompt: What is the API version for Lease?
  type: command
  validation_steps:
  - cmd: coordination.k8s.io/v1
    matcher: {}
  metadata:
    id: lease::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: lease::namespaced
  prompt: Is Lease a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: lease::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: endpointslice::apiversion
  prompt: What is the API version for EndpointSlice?
  type: command
  validation_steps:
  - cmd: discovery.k8s.io/v1
    matcher: {}
  metadata:
    id: endpointslice::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: endpointslice::namespaced
  prompt: Is EndpointSlice a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: endpointslice::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: flowschema::apiversion
  prompt: What is the API version for FlowSchema?
  type: command
  validation_steps:
  - cmd: flowcontrol.apiserver.k8s.io/v1beta2
    matcher: {}
  metadata:
    id: flowschema::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: flowschema::namespaced
  prompt: Is FlowSchema a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: flowschema::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: prioritylevelconfiguration::apiversion
  prompt: What is the API version for PriorityLevelConfiguration?
  type: command
  validation_steps:
  - cmd: flowcontrol.apiserver.k8s.io/v1beta2
    matcher: {}
  metadata:
    id: prioritylevelconfiguration::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: prioritylevelconfiguration::namespaced
  prompt: Is PriorityLevelConfiguration a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: prioritylevelconfiguration::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: ingressclass::apiversion
  prompt: What is the API version for IngressClass?
  type: command
  validation_steps:
  - cmd: networking.k8s.io/v1
    matcher: {}
  metadata:
    id: ingressclass::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: ingressclass::namespaced
  prompt: Is IngressClass a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: ingressclass::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: ingress::shortnames
  prompt: What is the shortname for Ingress?
  type: command
  validation_steps:
  - cmd: ing
    matcher: {}
  metadata:
    id: ingress::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: ingress::apiversion
  prompt: What is the API version for Ingress?
  type: command
  validation_steps:
  - cmd: networking.k8s.io/v1
    matcher: {}
  metadata:
    id: ingress::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: ingress::namespaced
  prompt: Is Ingress a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: ingress::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: networkpolicy::shortnames
  prompt: What is the shortname for NetworkPolicy?
  type: command
  validation_steps:
  - cmd: netpol
    matcher: {}
  metadata:
    id: networkpolicy::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: networkpolicy::apiversion
  prompt: What is the API version for NetworkPolicy?
  type: command
  validation_steps:
  - cmd: networking.k8s.io/v1
    matcher: {}
  metadata:
    id: networkpolicy::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: networkpolicy::namespaced
  prompt: Is NetworkPolicy a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: networkpolicy::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: runtimeclass::apiversion
  prompt: What is the API version for RuntimeClass?
  type: command
  validation_steps:
  - cmd: node.k8s.io/v1
    matcher: {}
  metadata:
    id: runtimeclass::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: runtimeclass::namespaced
  prompt: Is RuntimeClass a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: runtimeclass::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: poddisruptionbudget::shortnames
  prompt: What is the shortname for PodDisruptionBudget?
  type: command
  validation_steps:
  - cmd: pdb
    matcher: {}
  metadata:
    id: poddisruptionbudget::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: poddisruptionbudget::apiversion
  prompt: What is the API version for PodDisruptionBudget?
  type: command
  validation_steps:
  - cmd: policy/v1
    matcher: {}
  metadata:
    id: poddisruptionbudget::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: poddisruptionbudget::namespaced
  prompt: Is PodDisruptionBudget a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: poddisruptionbudget::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: podsecuritypolicy::shortnames
  prompt: What is the shortname for PodSecurityPolicy?
  type: command
  validation_steps:
  - cmd: psp
    matcher: {}
  metadata:
    id: podsecuritypolicy::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: podsecuritypolicy::apiversion
  prompt: What is the API version for PodSecurityPolicy?
  type: command
  validation_steps:
  - cmd: policy/v1beta1
    matcher: {}
  metadata:
    id: podsecuritypolicy::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: podsecuritypolicy::namespaced
  prompt: Is PodSecurityPolicy a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: podsecuritypolicy::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: clusterrolebinding::apiversion
  prompt: What is the API version for ClusterRoleBinding?
  type: command
  validation_steps:
  - cmd: rbac.authorization.k8s.io/v1
    matcher: {}
  metadata:
    id: clusterrolebinding::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: clusterrolebinding::namespaced
  prompt: Is ClusterRoleBinding a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: clusterrolebinding::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: clusterrole::apiversion
  prompt: What is the API version for ClusterRole?
  type: command
  validation_steps:
  - cmd: rbac.authorization.k8s.io/v1
    matcher: {}
  metadata:
    id: clusterrole::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: clusterrole::namespaced
  prompt: Is ClusterRole a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: clusterrole::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: rolebinding::apiversion
  prompt: What is the API version for RoleBinding?
  type: command
  validation_steps:
  - cmd: rbac.authorization.k8s.io/v1
    matcher: {}
  metadata:
    id: rolebinding::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: rolebinding::namespaced
  prompt: Is RoleBinding a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: rolebinding::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: role::apiversion
  prompt: What is the API version for Role?
  type: command
  validation_steps:
  - cmd: rbac.authorization.k8s.io/v1
    matcher: {}
  metadata:
    id: role::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: role::namespaced
  prompt: Is Role a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: role::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: priorityclass::shortnames
  prompt: What is the shortname for PriorityClass?
  type: command
  validation_steps:
  - cmd: pc
    matcher: {}
  metadata:
    id: priorityclass::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: priorityclass::apiversion
  prompt: What is the API version for PriorityClass?
  type: command
  validation_steps:
  - cmd: scheduling.k8s.io/v1
    matcher: {}
  metadata:
    id: priorityclass::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: priorityclass::namespaced
  prompt: Is PriorityClass a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: priorityclass::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: csidriver::apiversion
  prompt: What is the API version for CSIDriver?
  type: command
  validation_steps:
  - cmd: storage.k8s.io/v1
    matcher: {}
  metadata:
    id: csidriver::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: csidriver::namespaced
  prompt: Is CSIDriver a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: csidriver::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: csinode::apiversion
  prompt: What is the API version for CSINode?
  type: command
  validation_steps:
  - cmd: storage.k8s.io/v1
    matcher: {}
  metadata:
    id: csinode::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: csinode::namespaced
  prompt: Is CSINode a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: csinode::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: csistoragecapacity::apiversion
  prompt: What is the API version for CSIStorageCapacity?
  type: command
  validation_steps:
  - cmd: storage.k8s.io/v1
    matcher: {}
  metadata:
    id: csistoragecapacity::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: csistoragecapacity::namespaced
  prompt: Is CSIStorageCapacity a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'true'
    matcher: {}
  metadata:
    id: csistoragecapacity::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: storageclass::shortnames
  prompt: What is the shortname for StorageClass?
  type: command
  validation_steps:
  - cmd: sc
    matcher: {}
  metadata:
    id: storageclass::shortnames
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: storageclass::apiversion
  prompt: What is the API version for StorageClass?
  type: command
  validation_steps:
  - cmd: storage.k8s.io/v1
    matcher: {}
  metadata:
    id: storageclass::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: storageclass::namespaced
  prompt: Is StorageClass a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: storageclass::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: volumeattachment::apiversion
  prompt: What is the API version for VolumeAttachment?
  type: command
  validation_steps:
  - cmd: storage.k8s.io/v1
    matcher: {}
  metadata:
    id: volumeattachment::apiversion
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: volumeattachment::namespaced
  prompt: Is VolumeAttachment a namespaced resource? (true/false)
  type: command
  validation_steps:
  - cmd: 'false'
    matcher: {}
  metadata:
    id: volumeattachment::namespaced
    type: command
    category: Resource Reference
    citation: https://kubernetes.io/docs/reference/kubectl/#resource-types
- id: secret-mgmt-q1
  prompt: Create a Secret named 'db-creds' with username=admin and password=password123
  type: command
  metadata:
    id: secret-mgmt-q1
    category: Secret Management
    response: kubectl create secret generic db-creds --from-literal=username=admin
      --from-literal=password=password123
    validator:
      type: ai
      expected: kubectl create secret generic db-creds --from-literal=username=admin
        --from-literal=password=password123
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=1,value%20pair%20in%20a%20ConfigMap
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- id: secret-mgmt-q2
  prompt: Create a Secret named 'tls-cert' from a certificate file
  type: command
  metadata:
    id: secret-mgmt-q2
    category: Secret Management
    response: kubectl create secret generic tls-cert --from-file=/path/to/cert.pem
    validator:
      type: ai
      expected: kubectl create secret generic tls-cert --from-file=/path/to/cert.pem
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=Define%20container%20environment%20variables%20using,ConfigMap%20data
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- id: secret-mgmt-q3
  prompt: View the encoded values in a Secret named 'api-secrets'
  type: command
  metadata:
    id: secret-mgmt-q3
    category: Secret Management
    response: kubectl get secret api-secrets -o yaml
    validator:
      type: ai
      expected: kubectl get secret api-secrets -o yaml
    links:
    - https://kubernetes.io/docs/tasks/configmap-secret/managing-secret-using-config-file/#:~:text=Managing%20Secrets%20using%20Configuration%20File,yaml
- id: secret-mgmt-q4
  prompt: Encode a string for use in a Secret YAML definition
  type: command
  metadata:
    id: secret-mgmt-q4
    category: Secret Management
    response: echo -n 'string' | base64
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=1,value%20pair%20in%20a%20ConfigMap
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- id: secret-mgmt-q5
  prompt: Decode a base64 encoded Secret value
  type: command
  metadata:
    id: secret-mgmt-q5
    category: Secret Management
    response: echo -n 'encoded string...' | base64 --decode
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=1,value%20pair%20in%20a%20ConfigMap
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- id: secret-mgmt-q6
  prompt: Create a TLS Secret type from certificate and key files
  type: command
  metadata:
    id: secret-mgmt-q6
    category: Secret Management
    response: kubectl create secret tls my-tls --cert=path/to/cert.crt --key=path/to/key.key
    validator:
      type: ai
      expected: kubectl create secret tls my-tls --cert=path/to/cert.crt --key=path/to/key.key
    links:
    - https://kubernetes.io/docs/concepts/configuration/secret/#:~:text=kubectl%20get%20secret%20secret,which%20is
- id: secret-mgmt-q8
  prompt: Create a Secret from a .env file
  type: command
  metadata:
    id: secret-mgmt-q8
    category: Secret Management
    response: kubectl create secret generic my-secrets --from-env-file=.env
    validator:
      type: ai
      expected: kubectl create secret generic my-secrets --from-env-file=.env
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=1,value%20pair%20in%20a%20ConfigMap
    - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- id: secret-mgmt-q10
  prompt: Create a docker-registry type Secret for private registry authentication
  type: command
  metadata:
    id: secret-mgmt-q10
    category: Secret Management
    response: kubectl create secret docker-registry regcred --docker-server=REGISTRY_SERVER
      --docker-username=USERNAME --docker-password=PASSWORD --docker-email=EMAIL
    validator:
      type: ai
      expected: kubectl create secret docker-registry regcred --docker-server=REGISTRY_SERVER
        --docker-username=USERNAME --docker-password=PASSWORD --docker-email=EMAIL
    links:
    - https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#:~:text=Pull%20an%20Image%20from%20a,your
- id: secret-mgmt-q11
  prompt: Create a generic secret named secret1 in namespace moon with two keys user=test
    and pass=pwd.
  type: command
  metadata:
    id: secret-mgmt-q11
    category: Secret Management
    response: kubectl -n moon create secret generic secret1 --from-literal=user=test
      --from-literal=pass=pwd
- id: secret-mgmt-q12
  prompt: Create a generic secret named secret2 in namespace moon with a key 'key'
    and value '12345678'.
  type: command
  metadata:
    id: secret-mgmt-q12
    category: Secret Management
    response: kubectl -n moon create secret generic secret2 --from-literal=key=12345678
- id: secret-mgmt-q13
  prompt: Mount the secret named secret2 as a volume at /tmp/secret2 in a pod.
  type: command
  metadata:
    id: secret-mgmt-q13
    category: Secret Management
    response: "volumes:\n  - name: secret2-volume\n    secret:\n      secretName:\
      \ secret2\nvolumeMounts:\n  - name: secret2-volume\n    mountPath: /tmp/secret2\n"
- id: secret-mgmt-q14
  prompt: Add environment variables SECRET1_USER and SECRET1_PASS to a pod, populated
    from the user and pass keys of secret1.
  type: command
  metadata:
    id: secret-mgmt-q14
    category: Secret Management
    response: "env:\n  - name: SECRET1_USER\n    valueFrom:\n      secretKeyRef:\n\
      \        name: secret1\n        key: user\n  - name: SECRET1_PASS\n    valueFrom:\n\
      \      secretKeyRef:\n        name: secret1\n        key: pass\n"
- id: shell-setup-q1
  prompt: Shell aliases are shortcuts for longer commands, saving you from typing
    long commands repeatedly. A common alias is `k` for `kubectl`, which lets you
    run commands like `k get pods`. Create the `k` alias now.
  type: command
  metadata:
    id: shell-setup-q1
    category: 'Shell Setup: Aliases & Autocomplete'
    response: alias k=kubectl
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=You%20can%20also%20use%20a,that%20also%20works%20with%20completion
- id: shell-setup-q8
  prompt: Enable kubectl autocomplete in your shell
  type: command
  metadata:
    id: shell-setup-q8
    category: 'Shell Setup: Aliases & Autocomplete'
    response: 'source <(kubectl completion bash)

      complete -F __start_kubectl k

      '
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=BASH
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=alias%20k%3Dkubectl%20complete%20,F%20__start_kubectl%20k
- id: shell-setup-q9
  prompt: List pods using the 'k' alias
  type: command
  metadata:
    id: shell-setup-q9
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get pods
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=,List%20all%20pods%20in%20the
- id: shell-setup-q10
  prompt: List replicasets using the short alias
  type: command
  metadata:
    id: shell-setup-q10
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get rs
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,apps%2Fv1%20true%20StatefulSet
- id: shell-setup-q11
  prompt: List daemonsets using the short alias
  type: command
  metadata:
    id: shell-setup-q11
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get ds
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,apps%2Fv1%20true%20ReplicaSet
- id: shell-setup-q12
  prompt: List services using the 'k' alias
  type: command
  metadata:
    id: shell-setup-q12
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get svc
    links:
    - https://kubernetes.io/docs/reference/kubectl/quick-reference/#:~:text=,all%20pods%20in%20the%20current
- id: shell-setup-q13
  prompt: List ConfigMaps using the short alias
  type: command
  metadata:
    id: shell-setup-q13
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get cm
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Endpoints
- id: shell-setup-q14
  prompt: List secrets using the short alias
  type: command
  metadata:
    id: shell-setup-q14
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get secret
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Secret
- id: shell-setup-q15
  prompt: List HorizontalPodAutoscalers using the short alias
  type: command
  metadata:
    id: shell-setup-q15
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get hpa
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,batch%2Fv1%20true%20CronJob
- id: shell-setup-q16
  prompt: List Ingresses using the short alias
  type: command
  metadata:
    id: shell-setup-q16
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get ing
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=PriorityLevelConfiguration%20,networking.k8s.io%2Fv1%20true%20NetworkPolicy
- id: shell-setup-q17
  prompt: List NetworkPolicies using the short alias
  type: command
  metadata:
    id: shell-setup-q17
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get netpol
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=PriorityLevelConfiguration%20,node.k8s.io%2Fv1%20false%20RuntimeClass
- id: shell-setup-q18
  prompt: List ServiceAccounts using the short alias
  type: command
  metadata:
    id: shell-setup-q18
    category: 'Shell Setup: Aliases & Autocomplete'
    response: k get sa
    links:
    - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- id: vim_quiz_data::0
  prompt: Enter insert mode at cursor
  type: command
  validation_steps:
  - cmd: i
    matcher: {}
  explanation: insert before the cursor
  metadata:
    id: vim_quiz_data::0
    answers:
    - i
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::1
  prompt: Append text after cursor
  type: command
  validation_steps:
  - cmd: a
    matcher: {}
  explanation: insert (append) after the cursor
  metadata:
    id: vim_quiz_data::1
    answers:
    - a
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::2
  prompt: Open a new line below the current line
  type: command
  validation_steps:
  - cmd: o
    matcher: {}
  explanation: append (open) a new line below the current line
  metadata:
    id: vim_quiz_data::2
    answers:
    - o
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::3
  prompt: Save file and quit
  type: command
  validation_steps:
  - cmd: :wq
    matcher: {}
  - cmd: :x
    matcher: {}
  - cmd: ZZ
    matcher: {}
  explanation: write (save) and quit
  metadata:
    id: vim_quiz_data::3
    answers:
    - :wq
    - :x
    - ZZ
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::4
  prompt: Exit without saving changes
  type: command
  validation_steps:
  - cmd: :q!
    matcher: {}
  - cmd: ZQ
    matcher: {}
  explanation: quit and throw away unsaved changes
  metadata:
    id: vim_quiz_data::4
    answers:
    - :q!
    - ZQ
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::5
  prompt: Save file without exiting
  type: command
  validation_steps:
  - cmd: :w
    matcher: {}
  explanation: write (save) the file, but don't exit
  metadata:
    id: vim_quiz_data::5
    answers:
    - :w
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::6
  prompt: Delete current line
  type: command
  validation_steps:
  - cmd: dd
    matcher: {}
  explanation: delete (cut) a line
  metadata:
    id: vim_quiz_data::6
    answers:
    - dd
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::7
  prompt: Copy current line (yank)
  type: command
  validation_steps:
  - cmd: yy
    matcher: {}
  explanation: yank (copy) a line
  metadata:
    id: vim_quiz_data::7
    answers:
    - yy
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::8
  prompt: Paste after cursor
  type: command
  validation_steps:
  - cmd: p
    matcher: {}
  explanation: put (paste) the clipboard after cursor
  metadata:
    id: vim_quiz_data::8
    answers:
    - p
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::9
  prompt: Undo last change
  type: command
  validation_steps:
  - cmd: u
    matcher: {}
  explanation: undo
  metadata:
    id: vim_quiz_data::9
    answers:
    - u
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::10
  prompt: Search forward for 'pattern'
  type: command
  validation_steps:
  - cmd: /pattern
    matcher: {}
  explanation: search for pattern
  metadata:
    id: vim_quiz_data::10
    answers:
    - /pattern
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::11
  prompt: Find next search occurrence
  type: command
  validation_steps:
  - cmd: n
    matcher: {}
  explanation: repeat search in same direction
  metadata:
    id: vim_quiz_data::11
    answers:
    - n
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::12
  prompt: Go to top of file
  type: command
  validation_steps:
  - cmd: gg
    matcher: {}
  explanation: go to the first line of the document
  metadata:
    id: vim_quiz_data::12
    answers:
    - gg
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::13
  prompt: Go to end of file
  type: command
  validation_steps:
  - cmd: G
    matcher: {}
  explanation: go to the last line of the document
  metadata:
    id: vim_quiz_data::13
    answers:
    - G
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::14
  prompt: Go to line 10
  type: command
  validation_steps:
  - cmd: :10
    matcher: {}
  - cmd: 10gg
    matcher: {}
  - cmd: 10G
    matcher: {}
  explanation: go to line N (e.g. 5gg or 5G)
  metadata:
    id: vim_quiz_data::14
    answers:
    - :10
    - 10gg
    - 10G
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::15
  prompt: Exit insert mode
  type: command
  validation_steps:
  - cmd: <Esc>
    matcher: {}
  - cmd: <C-c>
    matcher: {}
  explanation: exit insert mode
  metadata:
    id: vim_quiz_data::15
    answers:
    - <Esc>
    - <C-c>
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::17
  prompt: Redo the last undone change
  type: command
  validation_steps:
  - cmd: <C-r>
    matcher: {}
  explanation: redo
  metadata:
    id: vim_quiz_data::17
    answers:
    - <C-r>
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::18
  prompt: Enter visual mode
  type: command
  validation_steps:
  - cmd: v
    matcher: {}
  explanation: start visual mode, mark lines, then do a command (like y-yank)
  metadata:
    id: vim_quiz_data::18
    answers:
    - v
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::19
  prompt: Enter visual line mode
  type: command
  validation_steps:
  - cmd: V
    matcher: {}
  explanation: start linewise visual mode
  metadata:
    id: vim_quiz_data::19
    answers:
    - V
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::20
  prompt: Enter visual block mode
  type: command
  validation_steps:
  - cmd: <C-v>
    matcher: {}
  explanation: start visual block mode
  metadata:
    id: vim_quiz_data::20
    answers:
    - <C-v>
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::21
  prompt: Enter replace mode
  type: command
  validation_steps:
  - cmd: R
    matcher: {}
  explanation: replace more than one character, until ESC is pressed
  metadata:
    id: vim_quiz_data::21
    answers:
    - R
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::22
  prompt: Move to the next word
  type: command
  validation_steps:
  - cmd: w
    matcher: {}
  explanation: jump forwards to the start of a word
  metadata:
    id: vim_quiz_data::22
    answers:
    - w
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::23
  prompt: Move to the previous word
  type: command
  validation_steps:
  - cmd: b
    matcher: {}
  explanation: jump backwards to the start of a word
  metadata:
    id: vim_quiz_data::23
    answers:
    - b
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::24
  prompt: Move to the end of the word
  type: command
  validation_steps:
  - cmd: e
    matcher: {}
  explanation: jump forwards to the end of a word
  metadata:
    id: vim_quiz_data::24
    answers:
    - e
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::25
  prompt: Move to the first character of the line
  type: command
  validation_steps:
  - cmd: '0'
    matcher: {}
  explanation: jump to the start of the line
  metadata:
    id: vim_quiz_data::25
    answers:
    - '0'
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::26
  prompt: Move to the end of the line
  type: command
  validation_steps:
  - cmd: $
    matcher: {}
  explanation: jump to the end of the line
  metadata:
    id: vim_quiz_data::26
    answers:
    - $
    source: https://www.vim.org/docs.php
- id: vim_quiz_data::27
  prompt: Jump to matching bracket
  type: command
  validation_steps:
  - cmd: '%'
    matcher: {}
  explanation: 'move cursor to matching character (default supported pairs: ''()'',
    ''{}'', ''[]'')'
  metadata:
    id: vim_quiz_data::27
    answers:
    - '%'
    source: https://www.vim.org/docs.php
- id: ckad-sim::q8-rollout-undo
  prompt: A deployment named `api-new-c32` in namespace `neptune` is failing after
    a recent update due to an image with a typo (`ngnix` instead of `nginx`). Check
    the deployment's history and roll back to the previous working revision.
  type: live_k8s_edit
  pre_shell_cmds:
  - kubectl create ns neptune
  - kubectl -n neptune create deploy api-new-c32 --image=nginx:1.16.1
  - kubectl -n neptune wait --for=condition=available deploy/api-new-c32 --timeout=60s
  - kubectl -n neptune set image deploy/api-new-c32 nginx=ngnix:1.16.3
  validation_steps:
  - cmd: kubectl -n neptune wait --for=condition=available deploy/api-new-c32 --timeout=30s
    matcher: {}
  - cmd: kubectl -n neptune get deploy api-new-c32 -o jsonpath='{.spec.template.spec.containers[0].image}'
    matcher: {}
  explanation: Use `kubectl -n neptune rollout history deployment <name>` to see revisions.
    To find the error, `kubectl -n neptune describe pod <pod-name>` on one of the
    failing pods will show an `ImagePullBackOff` error. To fix this, use `kubectl
    -n neptune rollout undo deployment <name>` to revert to the previous, working
    revision.
  metadata:
    id: ckad-sim::q8-rollout-undo
    type: live_k8s_edit
    category: Workload Management
    source: https://killer.sh/ckad
- id: ckad-sim::q9-pod-to-deployment
  prompt: 'A single pod `holy-api` is running in namespace `pluto`. Convert it into
    a high-availability Deployment named `holy-api` with 3 replicas. The original
    pod''s definition is available at `/opt/course/9/holy-api-pod.yaml`. The new Deployment
    must add a `securityContext` to the container, setting `allowPrivilegeEscalation:
    false` and `privileged: false`. Save the final Deployment manifest to `/opt/course/9/holy-api-deployment.yaml`,
    create the Deployment, and delete the original pod.'
  type: live_k8s_edit
  pre_shell_cmds:
  - kubectl create ns pluto
  - mkdir -p /opt/course/9
  - "cat <<'EOF' > /opt/course/9/holy-api-pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n\
    \  labels:\n    id: holy-api\n  name: holy-api\nspec:\n  containers:\n  - env:\n\
    \    - name: CACHE_KEY_1\n      value: b&MTCi0=[T66RXm!jO@\n    - name: CACHE_KEY_2\n\
    \      value: PCAILGej5Ld@Q%{Q1=#\n    - name: CACHE_KEY_3\n      value: 2qz-]2OJlWDSTn_;RFQ\n\
    \    image: nginx:1.17.3-alpine\n    name: holy-api-container\n    volumeMounts:\n\
    \    - mountPath: /cache1\n      name: cache-volume1\n    - mountPath: /cache2\n\
    \      name: cache-volume2\n    - mountPath: /cache3\n      name: cache-volume3\n\
    \  volumes:\n  - emptyDir: {}\n    name: cache-volume1\n  - emptyDir: {}\n   \
    \ name: cache-volume2\n  - emptyDir: {}\n    name: cache-volume3\nEOF\n"
  - kubectl -n pluto apply -f /opt/course/9/holy-api-pod.yaml
  validation_steps:
  - cmd: kubectl -n pluto get deploy holy-api -o jsonpath='{.spec.replicas}'
    matcher: {}
  - cmd: kubectl -n pluto wait --for=condition=available deploy/holy-api --timeout=60s
    matcher: {}
  - cmd: kubectl -n pluto get deploy holy-api -o jsonpath='{.spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation}'
    matcher: {}
  - cmd: kubectl -n pluto get deploy holy-api -o jsonpath='{.spec.template.spec.containers[0].securityContext.privileged}'
    matcher: {}
  - cmd: test -f /opt/course/9/holy-api-deployment.yaml
    matcher: {}
  - cmd: '! kubectl -n pluto get pod holy-api'
    matcher: {}
  explanation: 'Start by creating a Deployment manifest based on the pod definition
    in `/opt/course/9/holy-api-pod.yaml`. Change `kind: Pod` to `kind: Deployment`
    and `apiVersion: v1` to `apiVersion: apps/v1`. Wrap the pod''s `spec` and `metadata`
    inside a `template` field. Add `replicas: 3` and a `selector` to the top-level
    `spec`. Add the required `securityContext`. Finally, apply the new manifest and
    delete the old pod.'
  metadata:
    id: ckad-sim::q9-pod-to-deployment
    type: live_k8s_edit
    category: Workload Management
    source: https://killer.sh/ckad
- id: ckad-sim::q3-job
  prompt: 'Create a Job manifest at `/opt/course/3/job.yaml`. The Job, named `neb-new-job`
    in namespace `neptune`, should run the command `sleep 2 && echo done` with image
    `busybox:1.31.0`. It should have a total of 3 completions, with 2 running in parallel.
    Pods created by the Job must have the label `id: awesome-job`, and the container
    should be named `neb-new-job-container`. After creating the manifest, apply it
    to start the Job.'
  type: live_k8s_edit
  pre_shell_cmds:
  - kubectl create namespace neptune
  - mkdir -p /opt/course/3
  validation_steps:
  - cmd: kubectl -n neptune get job neb-new-job -o jsonpath='{.spec.completions}'
    matcher: {}
  - cmd: kubectl -n neptune get job neb-new-job -o jsonpath='{.spec.parallelism}'
    matcher: {}
  - cmd: kubectl -n neptune get job neb-new-job -o jsonpath='{.spec.template.metadata.labels.id}'
    matcher: {}
  - cmd: kubectl -n neptune get job neb-new-job -o jsonpath='{.spec.template.spec.containers[0].name}'
    matcher: {}
  - cmd: test -f /opt/course/3/job.yaml
    matcher: {}
  - cmd: kubectl -n neptune get job neb-new-job
    matcher: {}
  explanation: A Job manifest can be created using `kubectl create job --dry-run=client
    -o yaml`. The YAML should then be edited to set `completions`, `parallelism`,
    container name, and pod labels in the `template` section. The job is then created
    using `kubectl apply -f <file.yaml>`. The job's status can be monitored with `kubectl
    get job` and `kubectl describe job`.
  metadata:
    id: ckad-sim::q3-job
    type: live_k8s_edit
    category: Workload Management
    source: https://killer.sh/ckad
- id: yaml-author-q1
  prompt: 'In namespace limit create a Pod named resource-checker using image httpd:alpine
    with container name my-container; requests: cpu=30m, memory=30Mi; limits: cpu=300m,
    memory=30Mi.'
  type: yaml_author
  metadata:
    id: yaml-author-q1
    category: YAML Authoring
    type: yaml_author
    answer: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: resource-checker\n  namespace:\
      \ limit\nspec:\n  containers:\n  - name: my-container\n    image: httpd:alpine\n\
      \    resources:\n      requests:\n        cpu: 30m\n        memory: 30Mi\n \
      \     limits:\n        cpu: 300m\n        memory: 30Mi\n"
- id: yaml-author-q2
  prompt: Create a ConfigMap named trauerweide with data tree=trauerweide.
  type: yaml_author
  metadata:
    id: yaml-author-q2
    category: YAML Authoring
    type: yaml_author
    answer: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: trauerweide\ndata:\n\
      \  tree: trauerweide\n"
- id: yaml-author-q3
  prompt: Create a Pod named pod1 using image nginx:alpine with env var TREE1 from
    ConfigMap trauerweide:key=tree and mount all keys of ConfigMap birke under /etc/birke.
  type: yaml_author
  metadata:
    id: yaml-author-q3
    category: YAML Authoring
    type: yaml_author
    answer: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod1\nspec:\n  containers:\n\
      \  - name: nginx\n    image: nginx:alpine\n    env:\n    - name: TREE1\n   \
      \   valueFrom:\n        configMapKeyRef:\n          name: trauerweide\n    \
      \      key: tree\n    volumeMounts:\n    - name: birke-volume\n      mountPath:\
      \ /etc/birke\n  volumes:\n  - name: birke-volume\n    configMap:\n      name:\
      \ birke\n"
- id: yaml-author-q4
  prompt: Create a Deployment named space-alien-welcome-message-generator using image
    httpd:alpine with 1 replica and readinessProbe running stat /tmp/ready with initialDelaySeconds=10
    and periodSeconds=5.
  type: yaml_author
  metadata:
    id: yaml-author-q4
    category: YAML Authoring
    type: yaml_author
    answer: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: space-alien-welcome-message-generator\n\
      spec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: space-alien-welcome-message-generator\n\
      \  template:\n    metadata:\n      labels:\n        app: space-alien-welcome-message-generator\n\
      \    spec:\n      containers:\n      - name: httpd\n        image: httpd:alpine\n\
      \        readinessProbe:\n          exec:\n            command:\n          \
      \  - stat\n            - /tmp/ready\n          initialDelaySeconds: 10\n   \
      \       periodSeconds: 5\n"
- id: yaml_quiz::app-config-cm
  prompt: Edit 'configmap.yaml' to create a ConfigMap named 'app-config' with the
    data 'database_url=mysql://localhost:3306/app'. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    configmap.yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: # TODO: Add\
      \ name\ndata:\n  # TODO: Add data fields\n"
  validation_steps:
  - cmd: kubectl get configmap app-config -o jsonpath='{.data.database_url}'
    matcher:
      contains: mysql://localhost:3306/app
  explanation: ConfigMap with key-value data for application configuration. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::app-config-cm
    type: live_k8s_edit
    category: YAML Editing - ConfigMaps
- id: yaml-edit-q4
  prompt: 'Create a ConfigMap named ''app-config'' with data: database_url=mysql://localhost:3306/app'
  type: yaml_edit
  explanation: ConfigMap with key-value data for application configuration
  metadata:
    id: yaml-edit-q4
    category: YAML Editing - ConfigMaps
    type: yaml_edit
    starting_yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: # TODO: Add\
      \ name\ndata:\n  # TODO: Add data fields\n"
    answer: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n\
      \  database_url: mysql://localhost:3306/app\n"
- id: yaml_quiz::frontend-deployment
  prompt: Edit 'deployment.yaml' to create a Deployment named 'frontend' with 3 replicas
    of 'nginx:1.21'. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: #\
      \ TODO: Add name\nspec:\n  replicas: # TODO: Set replicas\n  selector:\n   \
      \ matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n\
      \        app: frontend\n    spec:\n      containers:\n      - name: nginx\n\
      \        image: # TODO: Set image\n"
  validation_steps:
  - cmd: kubectl get deploy frontend -o jsonpath='{.spec.replicas}'
    matcher:
      contains: '3'
  - cmd: kubectl get deploy frontend -o jsonpath='{.spec.template.spec.containers[0].image}'
    matcher:
      contains: nginx:1.21
  explanation: Deployment with replica count and proper label selectors. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::frontend-deployment
    type: live_k8s_edit
    category: YAML Editing - Deployments
- id: yaml-edit-q3
  prompt: Create a Deployment named 'frontend' with 3 replicas. Set the image for
    the 'nginx' container to nginx:1.21.
  type: yaml_edit
  explanation: Deployment with replica count and proper label selectors
  metadata:
    id: yaml-edit-q3
    category: YAML Editing - Deployments
    type: yaml_edit
    starting_yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: # TODO:\
      \ Add name\nspec:\n  replicas: # TODO: Set replicas\n  selector:\n    matchLabels:\n\
      \      app: frontend\n  template:\n    metadata:\n      labels:\n        app:\
      \ frontend\n    spec:\n      containers:\n      - name: nginx\n        image:\
      \ # TODO: Set image\n"
    answer: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend\n\
      spec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: frontend\n \
      \ template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n\
      \      containers:\n      - name: nginx\n        image: nginx:1.21\n"
- id: yaml_quiz::resource-checker-pod
  prompt: A namespace 'limit' has been created. Edit 'pod.yaml' to define a Pod named
    'resource-checker' in that namespace. It should use the 'httpd:alpine' image with
    a container named 'my-container'. Configure resource requests for 'cpu=30m' and
    'memory=30Mi', and limits for 'cpu=300m' and 'memory=30Mi'. After editing, apply
    the manifest.
  type: live_k8s_edit
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: resource-checker\n  namespace:\
      \ limit\nspec:\n  containers:\n  - name: my-container\n    image: httpd:alpine\n\
      \    resources:\n      requests:\n        cpu: # TODO\n        memory: # TODO\n\
      \      limits:\n        cpu: # TODO\n        memory: # TODO\n"
  pre_shell_cmds:
  - kubectl create ns limit
  validation_steps:
  - cmd: kubectl get pod resource-checker -n limit -o jsonpath='{.spec.containers[0].resources.requests.cpu}'
    matcher:
      contains: 30m
  - cmd: kubectl get pod resource-checker -n limit -o jsonpath='{.spec.containers[0].resources.requests.memory}'
    matcher:
      contains: 30Mi
  - cmd: kubectl get pod resource-checker -n limit -o jsonpath='{.spec.containers[0].resources.limits.cpu}'
    matcher:
      contains: 300m
  - cmd: kubectl get pod resource-checker -n limit -o jsonpath='{.spec.containers[0].resources.limits.memory}'
    matcher:
      contains: 30Mi
  explanation: Pod with resource requests and limits. Validation is performed by checking
    the live resource in the cluster, not by comparing YAML files.
  metadata:
    id: yaml_quiz::resource-checker-pod
    type: live_k8s_edit
    category: YAML Editing - General
- id: yaml_quiz::trauerweide-cm
  prompt: Edit 'configmap.yaml' to create a ConfigMap named 'trauerweide' with the
    data 'tree=trauerweide'. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    configmap.yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: # TODO\n\
      data:\n  # TODO\n"
  validation_steps:
  - cmd: kubectl get configmap trauerweide -o jsonpath='{.data.tree}'
    matcher:
      contains: trauerweide
  explanation: Basic ConfigMap creation. Validation is performed by checking the live
    resource in the cluster, not by comparing YAML files.
  metadata:
    id: yaml_quiz::trauerweide-cm
    type: live_k8s_edit
    category: YAML Editing - General
- id: yaml_quiz::pod-with-cm-ref
  prompt: Two ConfigMaps, 'trauerweide' and 'birke', have been created. Edit 'pod.yaml'
    to create a Pod named 'pod1' using the 'nginx:alpine' image. The Pod should have
    an environment variable 'TREE1' that gets its value from the 'tree' key of the
    'trauerweide' ConfigMap. It should also mount all keys from the 'birke' ConfigMap
    into the directory '/etc/birke'. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod1\nspec:\n  containers:\n\
      \  - name: nginx\n    image: nginx:alpine\n    env:\n      # TODO\n    volumeMounts:\n\
      \      # TODO\n  volumes:\n    # TODO\n"
  pre_shell_cmds:
  - kubectl create configmap trauerweide --from-literal=tree=trauerweide
  - kubectl create configmap birke --from-literal=sample-key=sample-value
  validation_steps:
  - cmd: kubectl get pod pod1 -o jsonpath='{.spec.containers[0].env[0].valueFrom.configMapKeyRef.name}'
    matcher:
      contains: trauerweide
  - cmd: kubectl get pod pod1 -o jsonpath='{.spec.volumes[0].configMap.name}'
    matcher:
      contains: birke
  explanation: Pod with environment variable and volume from ConfigMaps. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::pod-with-cm-ref
    type: live_k8s_edit
    category: YAML Editing - General
- id: yaml_quiz::deployment-readiness
  prompt: Edit 'deployment.yaml' to create a Deployment named 'space-alien-welcome-message-generator'
    using the 'httpd:alpine' image. It should have 1 replica and a readinessProbe
    that runs the command 'stat /tmp/ready' with an 'initialDelaySeconds' of 10 and
    a 'periodSeconds' of 5. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: space-alien-welcome-message-generator\n\
      spec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: space-alien-welcome-message-generator\n\
      \  template:\n    metadata:\n      labels:\n        app: space-alien-welcome-message-generator\n\
      \    spec:\n      containers:\n      - name: httpd\n        image: httpd:alpine\n\
      \        readinessProbe:\n          # TODO\n"
  validation_steps:
  - cmd: kubectl get deploy space-alien-welcome-message-generator -o jsonpath='{.spec.template.spec.containers[0].readinessProbe.exec.command[1]}'
    matcher:
      contains: /tmp/ready
  - cmd: kubectl get deploy space-alien-welcome-message-generator -o jsonpath='{.spec.template.spec.containers[0].readinessProbe.initialDelaySeconds}'
    matcher:
      contains: '10'
  explanation: Deployment with a readiness probe. Validation is performed by checking
    the live resource in the cluster, not by comparing YAML files.
  metadata:
    id: yaml_quiz::deployment-readiness
    type: live_k8s_edit
    category: YAML Editing - General
- id: yaml_quiz::web-server-pod
  prompt: Edit 'pod.yaml' to create a Pod named 'web-server' using the 'nginx:1.20'
    image, exposing port 80. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: # TODO: Add name\nspec:\n\
      \  containers:\n  - name: # TODO: Add container name\n    image: # TODO: Add\
      \ image\n    ports:\n    - containerPort: # TODO: Add port\n"
  validation_steps:
  - cmd: kubectl get pod web-server -o jsonpath='{.spec.containers[0].image}'
    matcher:
      contains: nginx:1.20
  - cmd: kubectl get pod web-server -o jsonpath='{.spec.containers[0].ports[0].containerPort}'
    matcher:
      contains: '80'
  explanation: Basic pod with specific name, image, and port configuration. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::web-server-pod
    type: live_k8s_edit
    category: YAML Editing - Pods
- id: yaml_quiz::pod-with-env
  prompt: 'Edit ''pod.yaml'' to create a Pod named ''app-pod'' with environment variables:
    DB_HOST=localhost, DB_PORT=5432. After editing, apply the manifest.'
  type: live_k8s_edit
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: app-pod\nspec:\n  containers:\n\
      \  - name: app\n    image: nginx\n    env:\n    # TODO: Add environment variables\n"
  validation_steps:
  - cmd: kubectl get pod app-pod -o jsonpath='{.spec.containers[0].env[0].name}'
    matcher:
      contains: DB_HOST
  - cmd: kubectl get pod app-pod -o jsonpath='{.spec.containers[0].env[1].value}'
    matcher:
      contains: '5432'
  explanation: Pod with environment variables defined in container spec. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::pod-with-env
    type: live_k8s_edit
    category: YAML Editing - Pods
- id: yaml-edit-q1
  prompt: Create a Pod named 'web-server' with a container named 'nginx' using the
    nginx:1.20 image, and expose port 80.
  type: yaml_edit
  explanation: Basic pod with specific name, image, and port configuration
  metadata:
    id: yaml-edit-q1
    category: YAML Editing - Pods
    type: yaml_edit
    starting_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: # TODO: Add name\n\
      spec:\n  containers:\n  - name: # TODO: Add container name\n    image: # TODO:\
      \ Add image\n    ports:\n    - containerPort: # TODO: Add port\n"
    answer: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: web-server\nspec:\n  containers:\n\
      \  - name: nginx\n    image: nginx:1.20\n    ports:\n    - containerPort: 80\n"
- id: yaml-edit-q2
  prompt: 'Create a Pod named ''app-pod'' with container name ''app'' and environment
    variables: DB_HOST=localhost, DB_PORT=5432'
  type: yaml_edit
  explanation: Pod with environment variables defined in container spec
  metadata:
    id: yaml-edit-q2
    category: YAML Editing - Pods
    type: yaml_edit
    starting_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: app-pod\nspec:\n\
      \  containers:\n  - name: app\n    image: nginx\n    env:\n    # TODO: Add environment\
      \ variables\n"
    answer: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: app-pod\nspec:\n  containers:\n\
      \  - name: app\n    image: nginx\n    env:\n    - name: DB_HOST\n      value:\
      \ localhost\n    - name: DB_PORT\n      value: \"5432\"\n"
- id: manifests::configmaps::add-data
  prompt: 'Edit the ConfigMap manifest to add a new key-value pair: `database.host`
    with value `mysql.example.com`.'
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    configmap.yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-config\n\
      data:\n  app.name: my-app\n"
  correct_yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-config\ndata:\n\
    \  app.name: my-app\n  database.host: mysql.example.com\n"
- id: manifests::deployments::increase-replicas
  prompt: Edit the deployment manifest to increase the number of replicas to 3.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n\
      spec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n\
      \    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n\
      \      - name: nginx\n        image: nginx:1.14.2\n"
  correct_yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n\
    spec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n    template:\n\
    \      metadata:\n        labels:\n          app: nginx\n    spec:\n      containers:\n\
    \      - name: nginx\n        image: nginx:1.14.2\n"
- id: manifests::deployments::change-image
  prompt: Edit the deployment manifest to change the container image from `nginx:1.14.2`
    to `nginx:1.16.1`.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n\
      spec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n\
      \    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n\
      \      - name: nginx\n        image: nginx:1.14.2\n"
  correct_yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n\
    spec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n    template:\n\
    \      metadata:\n        labels:\n          app: nginx\n    spec:\n      containers:\n\
    \      - name: nginx\n        image: nginx:1.16.1\n"
- id: manifests::deployments::add-init-container
  prompt: 'A Deployment needs an init container to prepare a volume. For the `test-init-container`
    Deployment in namespace `mars`, add an `initContainer` named `init-con`. It should
    use the `busybox:1.31.0` image and run a command to create a file: `echo ''check
    this out!'' > /tmp/web-content/index.html`. The init container should mount the
    existing `web-content` volume at `/tmp/web-content`.'
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-init-container\n\
      \  namespace: mars\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n  \
      \    id: test-init-container\n  template:\n    metadata:\n      labels:\n  \
      \      id: test-init-container\n    spec:\n      volumes:\n      - name: web-content\n\
      \        emptyDir: {}\n      containers:\n      - name: nginx\n        image:\
      \ nginx:1.17.3-alpine\n        volumeMounts:\n        - name: web-content\n\
      \          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort:\
      \ 80\n"
  correct_yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-init-container\n\
    \  namespace: mars\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n    \
    \  id: test-init-container\n  template:\n    metadata:\n      labels:\n      \
    \  id: test-init-container\n    spec:\n      volumes:\n      - name: web-content\n\
    \        emptyDir: {}\n      initContainers:\n      - name: init-con\n       \
    \ image: busybox:1.31.0\n        command: ['sh', '-c', 'echo \"check this out!\"\
    \ > /tmp/web-content/index.html']\n        volumeMounts:\n        - name: web-content\n\
    \          mountPath: /tmp/web-content\n      containers:\n      - name: nginx\n\
    \        image: nginx:1.17.3-alpine\n        volumeMounts:\n        - name: web-content\n\
    \          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort:\
    \ 80\n"
- id: pod-mgmt-q10
  category: Pod Management
  prompt: Create a pod named pod1 with image httpd:2.4.41-alpine and output YAML only.
  response: kubectl run pod1 --image=httpd:2.4.41-alpine --dry-run=client -o yaml
- id: pod-mgmt-q11
  category: Pod Management
  prompt: Force delete a pod named webserver-sat-003 in the saturn namespace.
  response: kubectl -n saturn delete pod webserver-sat-003 --force --grace-period=0
- id: pod-mgmt-q12
  category: Pod Management
  prompt: Print the status phase of pod pod1 in the default namespace using a jsonpath
    query.
  response: kubectl -n default get pod pod1 -o jsonpath="{.status.phase}"
- id: manifests::pods::add-env-var
  prompt: Edit the pod manifest to add an environment variable `GREETING` with the
    value `Hello World` to the `nginx` container.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n\
      \  - name: nginx\n    image: nginx:1.14.2\n"
  correct_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n\
    \  - name: nginx\n    image: nginx:1.14.2\n    env:\n    - name: GREETING\n  \
    \    value: \"Hello World\"\n"
- id: manifests::pods::add-volume-mount
  prompt: Edit the pod manifest to mount a volume named `workdir` at path `/app/data`.
    The volume should be an `emptyDir`.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod-with-volume\n\
      spec:\n  containers:\n  - name: my-container\n    image: busybox\n    command:\
      \ [\"sleep\", \"3600\"]\n"
  correct_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod-with-volume\n\
    spec:\n  containers:\n  - name: my-container\n    image: busybox\n    command:\
    \ [\"sleep\", \"3600\"]\n    volumeMounts:\n    - name: workdir\n      mountPath:\
    \ /app/data\n  volumes:\n  - name: workdir\n    emptyDir: {}\n"
- id: manifests::pods::readiness-probe
  prompt: A Pod needs a readiness probe. Edit the Pod manifest for `pod6` to add a
    readiness probe that executes `cat /tmp/ready`. The probe should have an `initialDelaySeconds`
    of 5 and a `periodSeconds` of 10. The Pod's command should be `touch /tmp/ready
    && sleep 1d`.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod6\nspec:\n  containers:\n\
      \  - name: pod6\n    image: busybox:1.31.0\n    command:\n    - \"sh\"\n   \
      \ - \"-c\"\n    - \"touch /tmp/ready && sleep 1d\"\n"
  correct_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod6\nspec:\n  containers:\n\
    \  - name: pod6\n    image: busybox:1.31.0\n    command:\n    - \"sh\"\n    -\
    \ \"-c\"\n    - \"touch /tmp/ready && sleep 1d\"\n    readinessProbe:\n      exec:\n\
    \        command:\n        - cat\n        - /tmp/ready\n      initialDelaySeconds:\
    \ 5\n      periodSeconds: 10\n"
- id: manifests::services::change-port
  prompt: Edit the Service manifest to change the `targetPort` from 80 to 8080.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    service.yaml: "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\n\
      spec:\n  selector:\n    app: MyApp\n  ports:\n    - protocol: TCP\n      port:\
      \ 80\n      targetPort: 80\n"
  correct_yaml: "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n\
    \  selector:\n    app: MyApp\n  ports:\n    - protocol: TCP\n      port: 80\n\
    \      targetPort: 8080\n"
