questions:
  - question: "You have a deployment named 'webapp' with label 'app=webapp'. Create a ClusterIP service named 'webapp-svc' to expose the deployment on port 80."
    solution: |
      kubectl expose deployment webapp --name=webapp-svc --port=80 --target-port=80
  - question: "Create a manifest for a NodePort service named 'webapp-nodeport'. The service should forward traffic from a port on the node to port 80 on pods with the label 'app=webapp'."
    solution: |
      apiVersion: v1
      kind: Service
      metadata:
        name: webapp-nodeport
      spec:
        type: NodePort
        selector:
          app: webapp
        ports:
          - protocol: TCP
            port: 80
            targetPort: 80
  - question: "Service manifest (ClusterIP) exposing app=web on port 80 to targetPort 8080."
    solution: |
      apiVersion: v1
      kind: Service
      metadata:
        name: web
      spec:
        selector:
          app: web
        ports:
          - port: 80
            targetPort: 8080
  - question: "Headless Service manifest for app=db on port 5432."
    solution: |
      apiVersion: v1
      kind: Service
      metadata:
        name: db
      spec:
        clusterIP: None
        selector:
          app: db
        ports:
          - port: 5432
            targetPort: 5432
  - question: "Expose deployment frontend on port 80 as a ClusterIP service named frontend-svc."
    solution: "kubectl expose deployment frontend --port=80 --type=ClusterIP --name=frontend-svc"
  - question: "List all services."
    solution: "kubectl get services"
  - question: "Describe service frontend-svc."
    solution: "kubectl describe service frontend-svc"
  - question: "Delete service frontend-svc."
    solution: "kubectl delete service frontend-svc"
  - question: "Create a Service `my-service` that selects pods with label `app: MyApp`. The service should expose TCP port 80 and target port 8080 on the pods."
    solution: |
      apiVersion: v1
      kind: Service
      metadata:
        name: my-service
      spec:
        selector:
          app: MyApp
        ports:
          - protocol: TCP
            port: 80
            targetPort: 8080
