questions:
- question: Create a manifest for a Pod that uses the service account 'app-sa'.
  solutions:
  - apiVersion: v1
    kind: Pod
    metadata:
      name: sa-pod
    spec:
      containers:
      - command:
        - sleep
        - |-
          3600
        image: busybox
        name: main
      serviceAccountName: app-sa
- question: Command to generate a ServiceAccount app-sa (output YAML) without creating
    the resource.
  solutions:
  - kubectl create serviceaccount app-sa --dry-run=client -o yaml
- question: Pod manifest using serviceAccountName app-sa and not auto-mounting token.
  solutions:
  - apiVersion: v1
    kind: Pod
    metadata:
      name: app
    spec:
      serviceAccountName: app-sa
      automountServiceAccountToken: false
      containers:
        - name: busybox
          image: busybox
          command:
            - sh
            - -c
            - sleep 3600
- question: Create a ServiceAccount named default-sa.
  solutions:
  - kubectl create serviceaccount default-sa
  source: https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- question: List all ServiceAccounts.
  solutions:
  - kubectl get serviceaccounts
  source: https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- question: Describe serviceaccount default-sa.
  solutions:
  - kubectl describe serviceaccount default-sa
  source: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- question: Delete serviceaccount default-sa.
  solutions:
  - kubectl delete serviceaccount default-sa
  source: https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- question: In namespace `neptune`, find the Secret associated with the ServiceAccount
    `neptune-sa-v2` and write its decoded token to a file.
  solutions:
  - SECRET_NAME=$(kubectl -n neptune get secret -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='neptune-sa-v2')].metadata.name}")
    && kubectl -n neptune get secret $SECRET_NAME -o jsonpath='{.data.token}' | base64
    --decode > /path/to/token
