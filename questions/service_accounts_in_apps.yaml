questions:
- question: Create a new ServiceAccount named 'app-sa'.
  solution: kubectl create sa app-sa
- question: Create a manifest for a Pod that uses the service account 'app-sa'.
  solution: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: sa-pod\nspec:\n  serviceAccountName:\
    \ app-sa\n  containers:\n  - name: main\n    image: busybox\n    command: [\"\
    sleep\", \"3600\"]\n"
- question: Command to generate a ServiceAccount app-sa (output YAML).
  solution: kubectl create serviceaccount app-sa --dry-run=client -o yaml
- question: Pod manifest using serviceAccountName app-sa and not auto-mounting token.
  solution: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: sa-pod\nspec:\n  serviceAccountName:\
    \ app-sa\n  automountServiceAccountToken: false\n  containers:\n    - name: app\n\
    \      image: busybox\n      command: [\"sh\",\"-c\",\"sleep 3600\"]\n"
- question: Create a ServiceAccount named default-sa.
  solution: kubectl create serviceaccount default-sa
  source: https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- question: List all ServiceAccounts.
  solution: kubectl get serviceaccounts
  source: https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- question: Describe serviceaccount default-sa.
  solution: kubectl describe serviceaccount default-sa
  source: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
- question: Delete serviceaccount default-sa.
  solution: kubectl delete serviceaccount default-sa
  source: https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
- question: In namespace `neptune`, find the Secret associated with the ServiceAccount
    `neptune-sa-v2` and write its decoded token to a file.
  solution: SECRET_NAME=$(kubectl -n neptune get secret -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='neptune-sa-v2')].metadata.name}")
    && kubectl -n neptune get secret $SECRET_NAME -o jsonpath='{.data.token}' | base64
    --decode > /path/to/token
