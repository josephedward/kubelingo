questions:
  - question: "Create a new ServiceAccount named 'app-sa'."
    solution: |
      kubectl create sa app-sa
  - question: "Create a manifest for a Pod that uses the service account 'app-sa'."
    solution: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: sa-pod
      spec:
        serviceAccountName: app-sa
        containers:
        - name: main
          image: busybox
          command: ["sleep", "3600"]
  - question: "Command to generate a ServiceAccount app-sa (output YAML)."
    solution: "kubectl create serviceaccount app-sa --dry-run=client -o yaml"
  - question: "Pod manifest using serviceAccountName app-sa and not auto-mounting token."
    solution: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: sa-pod
      spec:
        serviceAccountName: app-sa
        automountServiceAccountToken: false
        containers:
          - name: app
            image: busybox
            command: ["sh","-c","sleep 3600"]
  - id: add-cmds-q33
    prompt: Create a ServiceAccount named default-sa
    type: command
    schema_category: Command Syntax
    subject_matter: ServiceAccounts in apps
    metadata:
      id: add-cmds-q33
      category: Additional Commands
      response: kubectl create serviceaccount default-sa
      links:
      - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
  - id: add-cmds-q34
    prompt: List all ServiceAccounts
    type: command
    schema_category: Command Syntax
    subject_matter: ServiceAccounts in apps
    metadata:
      id: add-cmds-q34
      category: Additional Commands
      response: kubectl get serviceaccounts
      links:
      - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
  - id: add-cmds-q35
    prompt: Describe serviceaccount default-sa
    type: command
    schema_category: Command Syntax
    subject_matter: ServiceAccounts in apps
    metadata:
      id: add-cmds-q35
      category: Additional Commands
      response: kubectl describe serviceaccount default-sa
      links:
      - https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#:~:text=,you%20want%20to%20assign%20to
  - id: add-cmds-q36
    prompt: Delete serviceaccount default-sa
    type: command
    schema_category: Command Syntax
    subject_matter: ServiceAccounts in apps
    metadata:
      id: add-cmds-q36
      category: Additional Commands
      response: kubectl delete serviceaccount default-sa
      links:
      - https://kubernetes.io/docs/reference/kubectl/#:~:text=,v1%20true%20Service
  - id: ckad-sim::q5-sa-secret
    prompt: In namespace `neptune`, find the Secret associated with the ServiceAccount
      `neptune-sa-v2` and write its decoded token to the file `/opt/course/5/token`.
    type: live_k8s_edit
    schema_category: Command Syntax
    subject_matter: ServiceAccounts in apps
    pre_shell_cmds:
    - kubectl create namespace neptune
    - kubectl -n neptune create sa neptune-sa-v2
    - kubectl -n neptune create secret generic neptune-secret-1 --from-literal=token=$(echo
      -n my-secret-token-value | base64)
    - kubectl -n neptune annotate secret neptune-secret-1 kubernetes.io/service-account.name=neptune-sa-v2
    - mkdir -p /opt/course/5
    validation_steps:
    - cmd: cat /opt/course/5/token
      matcher: {}
    explanation: 'First, find the secret associated with the ServiceAccount `neptune-sa-v2`.
      You can do this by listing secrets in the `neptune` namespace and checking their
      annotations (`k -n neptune get secrets -o yaml`). The secret with the annotation
      `kubernetes.io/service-account.name: neptune-sa-v2` is the correct one. Then,
      get the token from the secret''s data, base64 decode it, and write it to the specified
      file. A quick way is `kubectl -n neptune get secret <secret-name> -o jsonpath=''{.data.token}''
      | base64 --decode > /opt/course/5/token`.'
    metadata:
      id: ckad-sim::q5-sa-secret
      type: live_k8s_edit
      category: Configuration & Security
      source: https://killer.sh/ckad
