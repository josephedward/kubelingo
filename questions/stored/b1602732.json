{
  "id": "b1602732",
  "topic": "commands_args_env",
  "type": "declarative",
  "question": "**Scenario:** In Kubernetes, you often need to run a container with a different command than the one specified in its Dockerfile. For example, you might want to run a one-off debugging script, or start a database container with a custom configuration flag. You can override a container's default startup instruction (`ENTRYPOINT`) and its default arguments (`CMD`) directly in the Pod manifest. *   `spec.containers.command` overrides the image's `ENTRYPOINT`. *   `spec.containers.args` overrides the image's `CMD`. **Your Task:** Create a Pod manifest for a container that uses the `busybox` image. Your goal is to override its default command to make it print the word \"hello\" to its standard output and then remain running. **Requirements:** 1.  **Pod Name:** The Pod should be named `cmd-args`. 2.  **Image:** Use the `busybox` image. 3.  **Command:** The container should execute a shell. Use the `command` field to set this to `[\"sh\", \"-c\"]`. 4.  **Arguments:** The shell should be given a command string to execute. Use the `args` field to provide a string that first prints \"hello\" and then sleeps for a long time (e.g., `echo hello && sleep 3600`). The `sleep` command ensures the container remains in a `Running` state for inspection.\"",
  "source": "https://stackoverflow.com/questions/28976455/start-kubernetes-container-with-specific-command",
  "suggested_answer": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: cmd-args\nspec:\n  containers:\n  - args:\n    - echo hello && sleep 3600\n    command:\n    - sh\n    - -c\n    image: busybox\n    name: c",
  "user_answer": "",
  "ai_feedback": ""
}