questions:
- id: yaml_quiz::app-config-cm
  prompt: Edit 'configmap.yaml' to create a ConfigMap named 'app-config' with the
    data 'database_url=mysql://localhost:3306/app'. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    configmap.yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: # TODO: Add\
      \ name\ndata:\n  # TODO: Add data fields\n"
  validation_steps:
  - cmd: kubectl get configmap app-config -o jsonpath='{.data.database_url}'
    matcher:
      contains: mysql://localhost:3306/app
  explanation: ConfigMap with key-value data for application configuration. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::app-config-cm
    type: live_k8s_edit
    category: YAML Editing - ConfigMaps
- id: yaml-edit-q4
  prompt: 'Create a ConfigMap named ''app-config'' with data: database_url=mysql://localhost:3306/app'
  type: yaml_edit
  explanation: ConfigMap with key-value data for application configuration
  metadata:
    id: yaml-edit-q4
    category: YAML Editing - ConfigMaps
    type: yaml_edit
    starting_yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: # TODO: Add\
      \ name\ndata:\n  # TODO: Add data fields\n"
    answer: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n\
      \  database_url: mysql://localhost:3306/app\n"
- id: yaml_quiz::frontend-deployment
  prompt: Edit 'deployment.yaml' to create a Deployment named 'frontend' with 3 replicas
    of 'nginx:1.21'. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: #\
      \ TODO: Add name\nspec:\n  replicas: # TODO: Set replicas\n  selector:\n   \
      \ matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n\
      \        app: frontend\n    spec:\n      containers:\n      - name: nginx\n\
      \        image: # TODO: Set image\n"
  validation_steps:
  - cmd: kubectl get deploy frontend -o jsonpath='{.spec.replicas}'
    matcher:
      contains: '3'
  - cmd: kubectl get deploy frontend -o jsonpath='{.spec.template.spec.containers[0].image}'
    matcher:
      contains: nginx:1.21
  explanation: Deployment with replica count and proper label selectors. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::frontend-deployment
    type: live_k8s_edit
    category: YAML Editing - Deployments
- id: yaml-edit-q3
  prompt: Create a Deployment named 'frontend' with 3 replicas. Set the image for
    the 'nginx' container to nginx:1.21.
  type: yaml_edit
  explanation: Deployment with replica count and proper label selectors
  metadata:
    id: yaml-edit-q3
    category: YAML Editing - Deployments
    type: yaml_edit
    starting_yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: # TODO:\
      \ Add name\nspec:\n  replicas: # TODO: Set replicas\n  selector:\n    matchLabels:\n\
      \      app: frontend\n  template:\n    metadata:\n      labels:\n        app:\
      \ frontend\n    spec:\n      containers:\n      - name: nginx\n        image:\
      \ # TODO: Set image\n"
    answer: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend\n\
      spec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: frontend\n \
      \ template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n\
      \      containers:\n      - name: nginx\n        image: nginx:1.21\n"
- id: yaml_quiz::resource-checker-pod
  prompt: A namespace 'limit' has been created. Edit 'pod.yaml' to define a Pod named
    'resource-checker' in that namespace. It should use the 'httpd:alpine' image with
    a container named 'my-container'. Configure resource requests for 'cpu=30m' and
    'memory=30Mi', and limits for 'cpu=300m' and 'memory=30Mi'. After editing, apply
    the manifest.
  type: live_k8s_edit
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: resource-checker\n  namespace:\
      \ limit\nspec:\n  containers:\n  - name: my-container\n    image: httpd:alpine\n\
      \    resources:\n      requests:\n        cpu: # TODO\n        memory: # TODO\n\
      \      limits:\n        cpu: # TODO\n        memory: # TODO\n"
  pre_shell_cmds:
  - kubectl create ns limit
  validation_steps:
  - cmd: kubectl get pod resource-checker -n limit -o jsonpath='{.spec.containers[0].resources.requests.cpu}'
    matcher:
      contains: 30m
  - cmd: kubectl get pod resource-checker -n limit -o jsonpath='{.spec.containers[0].resources.requests.memory}'
    matcher:
      contains: 30Mi
  - cmd: kubectl get pod resource-checker -n limit -o jsonpath='{.spec.containers[0].resources.limits.cpu}'
    matcher:
      contains: 300m
  - cmd: kubectl get pod resource-checker -n limit -o jsonpath='{.spec.containers[0].resources.limits.memory}'
    matcher:
      contains: 30Mi
  explanation: Pod with resource requests and limits. Validation is performed by checking
    the live resource in the cluster, not by comparing YAML files.
  metadata:
    id: yaml_quiz::resource-checker-pod
    type: live_k8s_edit
    category: YAML Editing - General
- id: yaml_quiz::trauerweide-cm
  prompt: Edit 'configmap.yaml' to create a ConfigMap named 'trauerweide' with the
    data 'tree=trauerweide'. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    configmap.yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: # TODO\n\
      data:\n  # TODO\n"
  validation_steps:
  - cmd: kubectl get configmap trauerweide -o jsonpath='{.data.tree}'
    matcher:
      contains: trauerweide
  explanation: Basic ConfigMap creation. Validation is performed by checking the live
    resource in the cluster, not by comparing YAML files.
  metadata:
    id: yaml_quiz::trauerweide-cm
    type: live_k8s_edit
    category: YAML Editing - General
- id: yaml_quiz::pod-with-cm-ref
  prompt: Two ConfigMaps, 'trauerweide' and 'birke', have been created. Edit 'pod.yaml'
    to create a Pod named 'pod1' using the 'nginx:alpine' image. The Pod should have
    an environment variable 'TREE1' that gets its value from the 'tree' key of the
    'trauerweide' ConfigMap. It should also mount all keys from the 'birke' ConfigMap
    into the directory '/etc/birke'. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod1\nspec:\n  containers:\n\
      \  - name: nginx\n    image: nginx:alpine\n    env:\n      # TODO\n    volumeMounts:\n\
      \      # TODO\n  volumes:\n    # TODO\n"
  pre_shell_cmds:
  - kubectl create configmap trauerweide --from-literal=tree=trauerweide
  - kubectl create configmap birke --from-literal=sample-key=sample-value
  validation_steps:
  - cmd: kubectl get pod pod1 -o jsonpath='{.spec.containers[0].env[0].valueFrom.configMapKeyRef.name}'
    matcher:
      contains: trauerweide
  - cmd: kubectl get pod pod1 -o jsonpath='{.spec.volumes[0].configMap.name}'
    matcher:
      contains: birke
  explanation: Pod with environment variable and volume from ConfigMaps. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::pod-with-cm-ref
    type: live_k8s_edit
    category: YAML Editing - General
- id: yaml_quiz::deployment-readiness
  prompt: Edit 'deployment.yaml' to create a Deployment named 'space-alien-welcome-message-generator'
    using the 'httpd:alpine' image. It should have 1 replica and a readinessProbe
    that runs the command 'stat /tmp/ready' with an 'initialDelaySeconds' of 10 and
    a 'periodSeconds' of 5. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: space-alien-welcome-message-generator\n\
      spec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: space-alien-welcome-message-generator\n\
      \  template:\n    metadata:\n      labels:\n        app: space-alien-welcome-message-generator\n\
      \    spec:\n      containers:\n      - name: httpd\n        image: httpd:alpine\n\
      \        readinessProbe:\n          # TODO\n"
  validation_steps:
  - cmd: kubectl get deploy space-alien-welcome-message-generator -o jsonpath='{.spec.template.spec.containers[0].readinessProbe.exec.command[1]}'
    matcher:
      contains: /tmp/ready
  - cmd: kubectl get deploy space-alien-welcome-message-generator -o jsonpath='{.spec.template.spec.containers[0].readinessProbe.initialDelaySeconds}'
    matcher:
      contains: '10'
  explanation: Deployment with a readiness probe. Validation is performed by checking
    the live resource in the cluster, not by comparing YAML files.
  metadata:
    id: yaml_quiz::deployment-readiness
    type: live_k8s_edit
    category: YAML Editing - General
- id: yaml_quiz::web-server-pod
  prompt: Edit 'pod.yaml' to create a Pod named 'web-server' using the 'nginx:1.20'
    image, exposing port 80. After editing, apply the manifest.
  type: live_k8s_edit
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: # TODO: Add name\nspec:\n\
      \  containers:\n  - name: # TODO: Add container name\n    image: # TODO: Add\
      \ image\n    ports:\n    - containerPort: # TODO: Add port\n"
  validation_steps:
  - cmd: kubectl get pod web-server -o jsonpath='{.spec.containers[0].image}'
    matcher:
      contains: nginx:1.20
  - cmd: kubectl get pod web-server -o jsonpath='{.spec.containers[0].ports[0].containerPort}'
    matcher:
      contains: '80'
  explanation: Basic pod with specific name, image, and port configuration. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::web-server-pod
    type: live_k8s_edit
    category: YAML Editing - Pods
- id: yaml_quiz::pod-with-env
  prompt: 'Edit ''pod.yaml'' to create a Pod named ''app-pod'' with environment variables:
    DB_HOST=localhost, DB_PORT=5432. After editing, apply the manifest.'
  type: live_k8s_edit
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: app-pod\nspec:\n  containers:\n\
      \  - name: app\n    image: nginx\n    env:\n    # TODO: Add environment variables\n"
  validation_steps:
  - cmd: kubectl get pod app-pod -o jsonpath='{.spec.containers[0].env[0].name}'
    matcher:
      contains: DB_HOST
  - cmd: kubectl get pod app-pod -o jsonpath='{.spec.containers[0].env[1].value}'
    matcher:
      contains: '5432'
  explanation: Pod with environment variables defined in container spec. Validation
    is performed by checking the live resource in the cluster, not by comparing YAML
    files.
  metadata:
    id: yaml_quiz::pod-with-env
    type: live_k8s_edit
    category: YAML Editing - Pods
- id: yaml-edit-q1
  prompt: Create a Pod named 'web-server' with a container named 'nginx' using the
    nginx:1.20 image, and expose port 80.
  type: yaml_edit
  explanation: Basic pod with specific name, image, and port configuration
  metadata:
    id: yaml-edit-q1
    category: YAML Editing - Pods
    type: yaml_edit
    starting_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: # TODO: Add name\n\
      spec:\n  containers:\n  - name: # TODO: Add container name\n    image: # TODO:\
      \ Add image\n    ports:\n    - containerPort: # TODO: Add port\n"
    answer: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: web-server\nspec:\n  containers:\n\
      \  - name: nginx\n    image: nginx:1.20\n    ports:\n    - containerPort: 80\n"
- id: yaml-edit-q2
  prompt: 'Create a Pod named ''app-pod'' with container name ''app'' and environment
    variables: DB_HOST=localhost, DB_PORT=5432'
  type: yaml_edit
  explanation: Pod with environment variables defined in container spec
  metadata:
    id: yaml-edit-q2
    category: YAML Editing - Pods
    type: yaml_edit
    starting_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: app-pod\nspec:\n\
      \  containers:\n  - name: app\n    image: nginx\n    env:\n    # TODO: Add environment\
      \ variables\n"
    answer: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: app-pod\nspec:\n  containers:\n\
      \  - name: app\n    image: nginx\n    env:\n    - name: DB_HOST\n      value:\
      \ localhost\n    - name: DB_PORT\n      value: \"5432\"\n"
- id: manifests::configmaps::add-data
  prompt: 'Edit the ConfigMap manifest to add a new key-value pair: `database.host`
    with value `mysql.example.com`.'
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    configmap.yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-config\n\
      data:\n  app.name: my-app\n"
  correct_yaml: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-config\ndata:\n\
    \  app.name: my-app\n  database.host: mysql.example.com\n"
- id: manifests::deployments::increase-replicas
  prompt: Edit the deployment manifest to increase the number of replicas to 3.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n\
      spec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n\
      \    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n\
      \      - name: nginx\n        image: nginx:1.14.2\n"
  correct_yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n\
    spec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n    template:\n\
    \      metadata:\n        labels:\n          app: nginx\n    spec:\n      containers:\n\
    \      - name: nginx\n        image: nginx:1.14.2\n"
- id: manifests::deployments::change-image
  prompt: Edit the deployment manifest to change the container image from `nginx:1.14.2`
    to `nginx:1.16.1`.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n\
      spec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n\
      \    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n\
      \      - name: nginx\n        image: nginx:1.14.2\n"
  correct_yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n\
    spec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n    template:\n\
    \      metadata:\n        labels:\n          app: nginx\n    spec:\n      containers:\n\
    \      - name: nginx\n        image: nginx:1.16.1\n"
- id: manifests::deployments::add-init-container
  prompt: 'A Deployment needs an init container to prepare a volume. For the `test-init-container`
    Deployment in namespace `mars`, add an `initContainer` named `init-con`. It should
    use the `busybox:1.31.0` image and run a command to create a file: `echo ''check
    this out!'' > /tmp/web-content/index.html`. The init container should mount the
    existing `web-content` volume at `/tmp/web-content`.'
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-init-container\n\
      \  namespace: mars\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n  \
      \    id: test-init-container\n  template:\n    metadata:\n      labels:\n  \
      \      id: test-init-container\n    spec:\n      volumes:\n      - name: web-content\n\
      \        emptyDir: {}\n      containers:\n      - name: nginx\n        image:\
      \ nginx:1.17.3-alpine\n        volumeMounts:\n        - name: web-content\n\
      \          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort:\
      \ 80\n"
  correct_yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-init-container\n\
    \  namespace: mars\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n    \
    \  id: test-init-container\n  template:\n    metadata:\n      labels:\n      \
    \  id: test-init-container\n    spec:\n      volumes:\n      - name: web-content\n\
    \        emptyDir: {}\n      initContainers:\n      - name: init-con\n       \
    \ image: busybox:1.31.0\n        command: ['sh', '-c', 'echo \"check this out!\"\
    \ > /tmp/web-content/index.html']\n        volumeMounts:\n        - name: web-content\n\
    \          mountPath: /tmp/web-content\n      containers:\n      - name: nginx\n\
    \        image: nginx:1.17.3-alpine\n        volumeMounts:\n        - name: web-content\n\
    \          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort:\
    \ 80\n"
- id: manifests::pods::add-env-var
  prompt: Edit the pod manifest to add an environment variable `GREETING` with the
    value `Hello World` to the `nginx` container.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n\
      \  - name: nginx\n    image: nginx:1.14.2\n"
  correct_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n\
    \  - name: nginx\n    image: nginx:1.14.2\n    env:\n    - name: GREETING\n  \
    \    value: \"Hello World\"\n"
- id: manifests::pods::add-volume-mount
  prompt: Edit the pod manifest to mount a volume named `workdir` at path `/app/data`.
    The volume should be an `emptyDir`.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod-with-volume\n\
      spec:\n  containers:\n  - name: my-container\n    image: busybox\n    command:\
      \ [\"sleep\", \"3600\"]\n"
  correct_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod-with-volume\n\
    spec:\n  containers:\n  - name: my-container\n    image: busybox\n    command:\
    \ [\"sleep\", \"3600\"]\n    volumeMounts:\n    - name: workdir\n      mountPath:\
    \ /app/data\n  volumes:\n  - name: workdir\n    emptyDir: {}\n"
- id: manifests::pods::readiness-probe
  prompt: A Pod needs a readiness probe. Edit the Pod manifest for `pod6` to add a
    readiness probe that executes `cat /tmp/ready`. The probe should have an `initialDelaySeconds`
    of 5 and a `periodSeconds` of 10. The Pod's command should be `touch /tmp/ready
    && sleep 1d`.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    pod.yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod6\nspec:\n  containers:\n\
      \  - name: pod6\n    image: busybox:1.31.0\n    command:\n    - \"sh\"\n   \
      \ - \"-c\"\n    - \"touch /tmp/ready && sleep 1d\"\n"
  correct_yaml: "apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod6\nspec:\n  containers:\n\
    \  - name: pod6\n    image: busybox:1.31.0\n    command:\n    - \"sh\"\n    -\
    \ \"-c\"\n    - \"touch /tmp/ready && sleep 1d\"\n    readinessProbe:\n      exec:\n\
    \        command:\n        - cat\n        - /tmp/ready\n      initialDelaySeconds:\
    \ 5\n      periodSeconds: 10\n"
- id: manifests::services::change-port
  prompt: Edit the Service manifest to change the `targetPort` from 80 to 8080.
  type: yaml_edit
  category: YAML Editing Practice
  initial_files:
    service.yaml: "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\n\
      spec:\n  selector:\n    app: MyApp\n  ports:\n    - protocol: TCP\n      port:\
      \ 80\n      targetPort: 80\n"
  correct_yaml: "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n\
    \  selector:\n    app: MyApp\n  ports:\n    - protocol: TCP\n      port: 80\n\
    \      targetPort: 8080\n"
