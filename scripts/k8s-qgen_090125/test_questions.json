[
  {
    "question": "Create a pod and configure it to restart only on failure",
    "manifest": "apiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    app: nginx\n  name: nginx-pod\nspec:\n  containers:\n  - image: nginx:1.20\n    name: nginx\n    ports:\n    - containerPort: 80\n",
    "category": "pod",
    "difficulty": "easy",
    "source_type": "manifest"
  },
  {
    "question": "Create a deployment and expose it as a service",
    "command": "kubectl create deployment nginx --image=nginx",
    "category": "deployment",
    "difficulty": "medium",
    "source_type": "command"
  },
  {
    "question": "Create a pod named 'nginx-pod' using the nginx:1.20 image",
    "manifest": "apiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    app: nginx\n  name: nginx-pod\nspec:\n  containers:\n  - image: nginx:1.20\n    name: nginx\n    ports:\n    - containerPort: 80\n",
    "category": "pod",
    "difficulty": "easy",
    "source_type": "manifest"
  },
  {
    "question": "Create a pod that mounts a ConfigMap as a volume",
    "command": "kubectl create configmap app-config --from-literal=key1=value1",
    "category": "configmap",
    "difficulty": "medium",
    "source_type": "command"
  },
  {
    "question": "Create a ConfigMap named 'my-app' with key-value pairs",
    "command": "kubectl create configmap app-config --from-literal=key1=value1",
    "category": "configmap",
    "difficulty": "medium",
    "source_type": "command"
  }
]