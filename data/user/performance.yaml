api_discovery_docs:
  correct_questions:
  - check the kubectl client and server versions.
  - command to list namespaced resources supporting 'list'.
  - list all available api resources in the cluster.
  - command to view the fields under deployment.spec.strategy.
  - display documentation for the 'pod' resource, including its fields.
  - retrieve detailed information about the services running in the current namespace.
app_configuration:
  correct_questions:
  - create a configmap named 'my-configmap' from all files in the '/configs' directory.
  - list all configmaps.
  - create a configmap named 'app-config' with data items 'app.color=blue' and 'app.environment=dev'.
  - create a configmap named 'my-env-config' from an env file named 'config.env'.
  - 'create a generic secret named ''secret1'' in namespace ''moon'' with two keys:
    user=test and pass=pwd.'
  - create a secret named 'db-creds' with username 'admin' and password 'password123'.
  - create a configmap named 'game-config' from a file located at '/configs/game.properties'.
  - create a tls secret named 'my-tls'. the certificate is located at `/etc/certs/tls.crt`
    and the private key is at `/etc/certs/tls.key`.
  - delete a configmap named 'app-config'.
  - 'create a secret of type `docker-registry` named ''regcred''. use the following
    details for the secret: server=`https://private.docker.io/v1/`, username=`my-user`,
    password=`p@ssw0rd!`, email=`user@example.com`.'
  - the string 'zw5jb2Rlzf9zdhjpbmc=' is a base64 encoded secret value. decode it.
  - view the encoded values in a secret named 'api-secrets' in yaml format.
  - view the detailed contents of a configmap named 'db-config'.
  - create a manifest for a pod named 'pod1'. the pod must have a single container
    using the `nginx:alpine` image. the pod should be configured to have an environment
    variable 'tree1' sourced from the 'tree' key in a configmap named 'trauerweide'.
    additionally, it should mount the configmap 'birke' as a volume to the path '/etc/birke'.
  - you are given a basic pod manifest. modify it to add two environment variables,
    'secret1_user' and 'secret1_pass', sourced from the secret named 'secret1'. the
    key for 'secret1_user' is 'user' and the key for 'secret1_pass' is 'pass'.
  - create a manifest for a secret named 'db-secret' containing a username 'admin'
    and password 's3cur3p@ssw0rd'.
  - you are given a basic pod manifest. modify it to mount a secret named 'secret2'
    as a volume at the path `/tmp/secret2`. the volume should be named 'secret-volume'.
commands_args_env:
  correct_questions:
  - create a pod manifest named 'envfrom-cm'. the pod should have a container named
    'c' that uses the 'busybox' image. configure the container to import all key-value
    pairs from the configmap named 'app-cm' as environment variables.
  - '**scenario:** in kubernetes, you often need to run a container with a different
    command than the one specified in its dockerfile. for example, you might want
    to run a one-off debugging script, or start a database container with a custom
    configuration flag. you can override a container''s default startup instruction
    (`entrypoint`) and its default arguments (`cmd`) directly in the pod manifest.
    *   `spec.containers.command` overrides the image''s `entrypoint`. *   `spec.containers.args`
    overrides the image''s `cmd`. **your task:** create a pod manifest for a container
    that uses the `busybox` image. your goal is to override its default command to
    make it print the word "hello" to its standard output and then remain running.
    **requirements:** 1.  **pod name:** the pod should be named `cmd-args`. 2.  **image:**
    use the `busybox` image. 3.  **command:** the container should execute a shell.
    use the `command` field to set this to `["sh", "-c"]`. 4.  **arguments:** the
    shell should be given a command string to execute. use the `args` field to provide
    a string that first prints "hello" and then sleeps for a long time (e.g., `echo
    hello && sleep 3600`). the `sleep` command ensures the container remains in a
    `running` state for inspection."'
  - create a pod manifest named `args-pod` with a container named `busybox-container`
    using the `busybox` image. override the container's command to be `[`/bin/sh`,
    `-c`]` and its arguments to be `[`echo hello world`]` . the pod should have a
    `restartpolicy` of `never`.
core_workloads:
  correct_questions:
  - create a manifest for a pod named 'simple-pod'. the pod should use the 'nginx:1.21-alpine'
    image and have a label 'app=webserver'.
  - create a new pod named 'nginx' using the 'nginx:alpine' image.
  - delete the 'nginx' pod and the 'nginx-service'.
  - generate a yaml definition file for a pod named nginx, using the nginx image,
    without creating it.
  - scale the 'webapp' deployment to 5 replicas.
  - edit the following pod manifest to change the image tag to '1.22-alpine' and add
    the annotation 'owner=study-app'.
  - roll back a deployment named 'webapp' to its previous version.
  - check the rollout status of a deployment named 'frontend'.
  - expose the 'nginx' pod on port 80 using a service named 'nginx-service'.
  - create a temporary, interactive pod named 'my-shell' using the 'ubuntu' image.
    the pod should automatically delete upon exit.
  - print the status phase of pod 'pod1' in the default namespace using a jsonpath
    query. you must use the `-o` flag for output formatting.
  - view the history of a deployment named 'webapp'.
  - create a pod named busybox using the busybox image that runs the command 'sleep
    3600'.
  - create a deployment named 'webapp' with image 'nginx:1.21' and 3 replicas.
  - force delete a pod named 'webserver-sat-003' in the 'saturn' namespace. the deletion
    should be immediate, without waiting for a grace period.
  - update the image for the 'webapp' deployment to 'nginx:1.22'.
helm_basics:
  correct_questions:
  - how do you add the prometheus community helm repository from `https://prometheus-community.github.io/helm-charts`
    and name it `prometheus-community`?
  - what command downloads the `wordpress` chart from the `bitnami` repository without
    installing it?
  - uninstall the helm release `internal-issue-report-apiv1` in the mercury namespace.
  - how can you uninstall a helm release named `my-release`?
  - upgrade the helm release `internal-issue-report-apiv2` in namespace mercury to
    the latest nginx chart.
  - what is the command to create a basic helm chart named `my-chart`?
  - how do you install the `bitnami/node` chart as a release named `my-node`, setting
    `replicacount` to 5?
image_registry_use:
  correct_questions:
  - create a pod named 'private-pod' that uses an image 'my-registry/my-app:1.0' from
    a private registry. The pod should use an image pull secret named 'reg-secret'.
  - command to generate a docker-registry pull secret named 'regcred' for 'myregistry.com'
    with username 'myuser', password 'mypassword', and email 'myuser@example.com'
    (output yaml).
  - pod manifest with imagepullpolicy always and using imagepullsecrets regcred.
  - generate the kubernetes manifest for topic 'image_registry_use' using the cli.
linux_syntax:
  correct_questions:
  - in vim, how do you delete the current line?
  - in vim, how do you append text after the cursor?
  - in vim, how do you move to the next word?
  - in vim, how do you copy the current line (yank)?
  - in vim, how do you go to the top of the file?
  - create an alias 'k' for 'kubectl'.
  - in vim, how do you redo the last undone change?
  - in vim, how do you go to the end of the file?
  - in vim, how do you enter insert mode at the cursor?
  - in vim, how do you search forward for 'pattern'?
  - add kubectl autocompletion to ~/.bashrc.
  - in vim, how do you enter replace mode?
  - in vim, how do you move to the end of the line?
  - in vim, how do you enter visual block mode?
  - in vim, how do you move to the previous word?
  - in vim, how do you undo the last change?
  - in vim, how do you move to the end of the word?
  - in vim, how do you paste after the cursor?
  - in vim, how do you enter visual line mode?
  - in vim, how do you find the next search occurrence?
  - in vim, how do you enter visual mode?
  - in vim, how do you exit without saving changes?
  - in vim, how do you go to line 10?
  - set the kubeconfig environment variable to /home/user/config.
  - in vim, how do you save a file without exiting?
resource_reference:
  correct_questions:
  - what is the api version for networkpolicy?
  - is csinode a namespaced resource?
  - what is the api version for podtemplate?
  - is volumeattachment a namespaced resource?
  - what is the short name for ingress?
  - what is the short name for horizontalpodautoscaler?
  - is clusterrolebinding a namespaced resource?
  - is service a namespaced resource?
  - what is the api version for deployment?
  - what is the short name for pod?
  - what is the api version for daemonset?
  - what is the short name for storageclass?
  - what is the api version for persistentvolumeclaim?
  - is cronjob a namespaced resource?
  - what is the short name for persistentvolume?
  - is selfsubjectaccessreview a namespaced resource?
  - what is the api version for namespace?
  - is selfsubjectrulesreview a namespaced resource?
  - what is the api version for componentstatus?
  - what is the short name for service?
  - is ingress a namespaced resource?
  - is deployment a namespaced resource?
  - what is the short name for certificatesigningrequest?
  - what is the short name for node?
  - what is the api version for resourcequota?
  - what is the api version for node?
  - is configmap a namespaced resource?
  - what is the short name for deployment?
  - what is the api version for endpoints?
  - is event a namespaced resource?
  - is pod a namespaced resource?
  - what is the short name for persistentvolumeclaim?
  - is poddisruptionbudget a namespaced resource?
  - what is the api version for replicaset?
  - what is the api version for endpointslice?
  - is apiservice a namespaced resource?
  - is daemonset a namespaced resource?
  - is storageclass a namespaced resource?
sample_topic:
  correct_questions: []
services:
  correct_questions: []
