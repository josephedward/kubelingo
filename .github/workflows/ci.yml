
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-commits:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint commit messages
        uses: wagoid/commitlint-github-action@v4
        with:
          configFile: .commitlintrc.yaml
  test:
    runs-on: ubuntu-latest
    outputs:
      coverage-percent: ${{ steps.coverage.outputs.coverage-percent }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'  # Use a compatible Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements.txt
        pip install pytest coverage

    - name: Run tests with coverage
      id: coverage
      run: |
        coverage run -m pytest
        coverage report | tee coverage.txt
        COVERAGE=$(grep TOTAL coverage.txt | awk '{print $4}' | sed 's/%//')
        echo "::set-output name=coverage-percent::$COVERAGE"

  publish:
    needs: [test]
    if: github.event_name == 'push' && success()
    runs-on: ubuntu-latest
    environment: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install publishing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Determine Version Bump Type
      id: get_bump_type
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null \
        || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Get commit messages since the last tag
        COMMIT_MESSAGES=$(git log --pretty=format:%s ${LATEST_TAG}..HEAD)
        echo "Commit messages since last tag: $COMMIT_MESSAGES"

        BUMP_TYPE="patch" # Default to patch

        if echo "$COMMIT_MESSAGES" | grep -q "BREAKING CHANGE:"; then
          BUMP_TYPE="major"
        elif echo "$COMMIT_MESSAGES" | grep -q "feat:"; then
          BUMP_TYPE="minor"
        elif echo "$COMMIT_MESSAGES" | grep -q "fix:"; then
          BUMP_TYPE="patch"
        fi

        echo "Determined bump type: $BUMP_TYPE"
        echo "VERSION_BUMP_TYPE=$BUMP_TYPE" >> "$GITHUB_OUTPUT"

    - name: Bump Version
      run: |
        pip install semver
        python scripts/bump_version.py

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: twine upload dist/*
